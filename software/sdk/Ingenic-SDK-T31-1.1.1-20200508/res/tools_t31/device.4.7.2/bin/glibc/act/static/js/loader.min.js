(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var $ = require('./utils/helper');
var network = require('./utils/network');

function getVersion() {
    network.GET('/version', function (error, tuple) {
        if (tuple[0] === 200) {
            try {
                var info = JSON.parse(tuple[2]);
                $('#version').innerHTML = info.version;
            } catch (ignored) {}
        }
    });
}

function uploadFile(url, file) {
    network.UPLOAD(url, file, function (error, tuple) {
        if (error) {
            $('#file-loader').value = '';
            $('#progress').classList.add('hidden');
            $('#error').innerHTML = error;
        } else {
            if (tuple[0] === 200) {
                location.href = 'http://' + document.domain + ':' + location.port;
            } else {
                $('#file-loader').value = '';
                $('#progress').classList.add('hidden');
                $('#error').innerHTML = tuple[2];
            }
        }
    }, function (event) {
        if (event.lengthComputable) {
            var bar = $('#progress');
            bar.value = (event.loaded / event.total) * 100;
        }
    });
}

function loaded() {
    getVersion();
    $('#file-loader').addEventListener('change', function () {
        var file = this.files[0];
        if (file.type === 'text/xml' && file.size > 0) {
            $('#progress').classList.remove('hidden');
            uploadFile('/xml', file);
        } else {
            alert('Wrong type of file');
        }
    });
}
if (document.readyState == 'complete' || document.readyState == 'interactive') {
    loaded();
} else {
    document.addEventListener('DOMContentLoaded', loaded);
}

},{"./utils/helper":2,"./utils/network":3}],2:[function(require,module,exports){
module.exports = document.querySelector.bind(document);
module.exports.$ = document.querySelectorAll.bind(document);

},{}],3:[function(require,module,exports){
/**
 * @param {Function} callback
 * @return {XMLHttpRequest}
 * @private
 */
function __make_http_request(callback) {
    var xhr = new XMLHttpRequest();
    xhr.onload = function () {
        if (typeof callback === 'function') {
            callback(null, [parseInt(this.status), this.statusText, this.responseText]);
        }
    };
    xhr.onerror = function () {
        if (typeof callback === 'function') {
            callback('Network error');
        }
    };
    return xhr;
}

module.exports = {

    /**
     * @param {String} url
     * @param {Function} callback
     */
    GET: function (url, callback) {
        var xhr = __make_http_request(callback);
        xhr.open('GET', url);
        xhr.send();
    },

    /**
     * @param {String} url
     * @param {String|ArrayBuffer} payload
     * @param {Function} callback
     * @param {Object} [headers]
     */
    POST : function (url, payload, callback, headers) {
        var xhr = __make_http_request(callback);
        xhr.open('POST', url);
        if (headers) for (var name in headers) if (headers.hasOwnProperty(name)) {
            xhr.setRequestHeader(name, headers[name]);
        }
        xhr.send(payload);
    },

    /**
     * @param {String} url
     * @param {String} payload
     * @param {Function} callback
     * @param {Function} [onprogress]
     */
    UPLOAD: function (url, payload, callback, onprogress) {
        var xhr = __make_http_request(callback);
        if (typeof onprogress === 'function') {
            xhr.upload.onprogress = onprogress;
        }
        xhr.open('POST', url);
        xhr.send(payload);
    },

    /**
     * @param {String} url
     * @param {Function} callback
     * @constructor
     */
    DELETE: function (url, callback) {
        var xhr = __make_http_request(callback);
        xhr.open('DELETE', url);
        xhr.send();
    }
};

},{}]},{},[1]);
