(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var bundleFn = arguments[3];
var sources = arguments[4];
var cache = arguments[5];

var stringify = JSON.stringify;

module.exports = function (fn) {
    var keys = [];
    var wkey;
    var cacheKeys = Object.keys(cache);
    
    for (var i = 0, l = cacheKeys.length; i < l; i++) {
        var key = cacheKeys[i];
        if (cache[key].exports === fn) {
            wkey = key;
            break;
        }
    }
    
    if (!wkey) {
        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);
        var wcache = {};
        for (var i = 0, l = cacheKeys.length; i < l; i++) {
            var key = cacheKeys[i];
            wcache[key] = key;
        }
        sources[wkey] = [
            Function(['require','module','exports'], '(' + fn + ')(self)'),
            wcache
        ];
    }
    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);
    
    var scache = {}; scache[wkey] = wkey;
    sources[skey] = [
        Function(['require'],'require(' + stringify(wkey) + ')(self)'),
        scache
    ];
    
    var src = '(' + bundleFn + ')({'
        + Object.keys(sources).map(function (key) {
            return stringify(key) + ':['
                + sources[key][0]
                + ',' + stringify(sources[key][1]) + ']'
            ;
        }).join(',')
        + '},{},[' + stringify(skey) + '])'
    ;
    
    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;
    
    return new Worker(URL.createObjectURL(
        new Blob([src], { type: 'text/javascript' })
    ));
};

},{}],2:[function(require,module,exports){

/**
 * fixme
 * this is workaround for <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1016720">1016720</a>
 */
(function () {
    var templates = document.querySelectorAll('template');
    if (templates.length === 0) {
        return;
    }
    var pass = true;
    for (var i = 0; i < templates.length; i++) {
        if (templates[i].childNodes.length !== 0) {
            pass = false;
            break;
        }
    }
    if (pass) { // polyfill un-needed
        return;
    }
    for (var j = 0; j < templates.length; j++) {
        var children = templates[j].childNodes;
        for (var c = 0; c < children.length; c++) {
            templates[j].content.appendChild(children[c].cloneNode(true));
        }
        while (templates[j].hasChildNodes()) {
            templates[j].removeChild(templates[j].childNodes[0]);
        }
    }
})();


},{}],3:[function(require,module,exports){

if (!String.prototype.includes) {
    String.prototype.includes = function() {'use strict';
        return String.prototype.indexOf.apply(this, arguments) !== -1;
    };
}

if (!String.prototype.padLeft) {
    String.prototype.padLeft = function() {'use strict';
        var matrix = arguments[0];
        if (typeof matrix === 'string') {
            if (this === null || this === undefined) {
                return matrix;
            }
            var ln = matrix.length;
            return (matrix + this).slice(-ln);
        } else {
            return this;
        }
    };
}

if (!String.prototype.padRight) {
    String.prototype.padRight = function() {'use strict';
        var matrix = arguments[0];
        if (typeof matrix === 'string') {
            if (this === null || this === undefined) {
                return matrix;
            }
            var ln = matrix.length;
            return (this + matrix).substring(0,ln);
        } else {
            return this;
        }
    };
}

if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (searchString, position) {
        var subjectString = this.toString();
        var p = position;
        if (position === undefined || position > subjectString.length) {
            p = subjectString.length;
        }
        p -= searchString.length;
        var lastIndex = subjectString.indexOf(searchString, p);
        return lastIndex !== -1 && lastIndex === p;
    };
}

},{}],4:[function(require,module,exports){
var $ = require('../utils/helper');

var pruuid = 1;
var filesBlobs = {};
var filesURLs = [];

function __clean_up() {
    $('.messages').innerHTML = '';
    pruuid = 1;
    filesBlobs = {};
    filesURLs.forEach(URL.revokeObjectURL);
    filesURLs = [];
    Array.prototype.slice.call($.$('.button')).forEach(function (button) { button.classList.add('disabled'); });
}

/**
 * @param {String} type
 * @param {String} fname
 * @param {String} id
 * @param {Function} getBlob
 * @param {String} [name]
 * @return {Promise}
 * @private
 */
function __get_link (type, fname, id, getBlob, name) {
    return Promise.resolve(getBlob())
    .then(function (blob) {
        var ref = type + '-' + id;
        var a = document.createElement('a');
        a.id = ref;
        a.download = name || fname + '.' + type.toLowerCase();
        a.textContent = name || type.toUpperCase();
        filesBlobs[ref] = blob;
        var url = URL.createObjectURL(blob);
        filesURLs.push(url);
        a.href = url;
        return Promise.resolve(a);
    });
}

/**
 * @param {String} fname
 * @param {Number} id
 * @param {String} [text]
 * @private
 */
function __get_message_entry(fname, id, text) {
    var template = $('#template').content;
    template.querySelector('.fname').innerHTML = fname;
    if (id) {
        template.querySelector('.clickable').setAttribute('ref', id);
    }
    var clone = template.cloneNode(true);
    var display = clone.querySelector('.display');
    if (text) {
        display.innerHTML = text;
        display.classList.add('error');
    } else {
        display.querySelector('.progress').setAttribute('ref', id);
    }
    return clone;
}

/**
 * @param {String} fname
 * @return {Number}
 * @private
 */
function __next_id (fname) {
    var id = pruuid++;
    $('.messages').appendChild(__get_message_entry(fname, id));
    return id;
}

function __unknown_format (fname) {
    return function () {
        $('.messages').appendChild(__get_message_entry(fname, null, 'unsupported format'));
    };
}

module.exports = {
    cleanUp: __clean_up,
    nextId: __next_id,
    getMessageEntry: __get_message_entry,
    getLink: __get_link,
    unknownFormat: __unknown_format,
    getBlobs: function() { return filesBlobs; }
};

},{"../utils/helper":6}],5:[function(require,module,exports){

require('../fixme');
require('../polyfill');

var $ = require('../utils/helper');

var workify = require('webworkify');
var bin = require('../workers/bin');

var any = require('./cany');

var api = {};

var setCalibrationsFile = function (fname) {
    return function (event) {
        if (api) {
            convert(fname, event.target.result);
        }
    };
};

var convert = function (fname, calibrations) {
    var id = any.nextId(fname);
    var progress = $('.progress[ref="' + id + '"]');
    var worker = workify(bin);
    worker.onmessage = function (event) {
        var result = event.data;
        if (result.done) {
            progress.value = 100;
            any.getLink('bin', result.name, id.toString(), function () {
                return new Blob([result.bin], {type: 'application/octet-stream'});
            }, result.name)
            .then(function (a) {
                $('.clickable[ref="' + id + '"]').appendChild(a);
            });
        } else {
            progress.value = result.progress;
        }
    };
    worker.onerror = function (error) {
        var parent = progress.parentNode;
        parent.innerHTML = error.message;
        parent.classList.add('error');
    };
    worker.postMessage([calibrations, api]);
};

function loaded () {
    $('#commands-select').addEventListener('change', function (event) {
        any.cleanUp();
        api = {};
        var files = event.target.files || event.dataTransfer.files;
        if (files.length !== 1) {
            return;
        }
        var file = files[0];
        var reader = new FileReader();
        reader.onload = (function (f) {
            var fname = f.name.toLowerCase();
            if (fname.endsWith('.json')) {
                return function (event) {
                    api = event.target.result;
                };
            } else {
                return any.unknownFormat(f.name);
            }
        })(file);
        reader.readAsText(file);
    }, false);
    $('#calibrations-select').addEventListener('change', function (event) {
        any.cleanUp();
        var files = event.target.files || event.dataTransfer.files;
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            var reader = new FileReader();
            reader.onload = (function (f) {
                var fname = f.name.toLowerCase();
                if (fname.endsWith('.json')) {
                    return setCalibrationsFile(f.name);
                } else {
                    return any.unknownFormat(f.name);
                }

            })(file);
            reader.readAsText(file);
        }
    }, false);
}

if (document.readyState === 'complete' || document.readyState === 'interactive') {
    loaded(); // for Firefox
} else {
    document.addEventListener('DOMContentLoaded', loaded); // for Chrome
}

},{"../fixme":2,"../polyfill":3,"../utils/helper":6,"../workers/bin":7,"./cany":4,"webworkify":1}],6:[function(require,module,exports){
module.exports = document.querySelector.bind(document);
module.exports.$ = document.querySelectorAll.bind(document);

},{}],7:[function(require,module,exports){

var convertSample = function (sample, format, bin, offset, omit) {
    var sv = parseInt(sample);
    if (format === 4) { // little endian unsigned int (4)
        if (!omit) bin.setUint32(offset, sv, true);
        return offset + 4;
    } else if (format === 2) { // little endian unsigned short (2)
        if (!omit) bin.setUint16(offset, sv, true);
        return offset + 2;
    } else { // unsigned char (1)
        if (!omit) bin.setUint8(offset, sv);
        return offset + 1;
    }
};

var getApiID = function(name, apiMap) {
    if (apiMap.hasOwnProperty(name)) {
        return parseInt(apiMap[name]['value']);
    }
    return -1;
};

var writeArray = function (bin, offset, width, array, id, omit) {
    var syncWord = 0x11223344;
    var oset = convertSample(syncWord, 4, bin, offset, omit);
    oset = convertSample(id, 4, bin, oset, omit);
    for(var i = 0, ilen = array.length; i < ilen; i++) {
        oset = convertSample(array[i], width, bin, oset, omit);
    }
    return oset;
};

var writeLUT = function(lut, id, bin, offset, omit) {
    var width = parseInt(lut.width);
    return writeArray(bin, offset, width, lut.value, id, omit);
};

/**
 * @param {Worker} self
 */
module.exports = function (self) {
    self.onmessage = function(event) {
        var calibrations = JSON.parse(event.data[0]);
        var api = JSON.parse(event.data[1]);

        var apiSMap = api['calibration'];
        var apiDMap = api['calibration_isp'];
        var target = calibrations.target;

        var rname = target === 'sensor' ? 'static.bin' : 'dynamic.bin';

        var apiMap = {};
        for(var ks in apiSMap) if (apiSMap.hasOwnProperty(ks)) {apiMap[ks] = apiSMap[ks];}
        for(var kd in apiDMap) if (apiDMap.hasOwnProperty(kd)) {apiMap[kd] = apiDMap[kd];}

        var bin = null;
        var offset = 0;

        var luts = calibrations.luts, lut, name, id;
        for(var l = 0, len = luts.length; l < len; l++) { // dry run to calculate size
            lut = luts[l];
            name = lut.name;
            id = getApiID(name, apiMap);
            if (id === -1) {
                throw new Error('failed to find id for lut ' + name);
            } else {
                offset = writeLUT(lut, id, bin, offset, true);
            }
            if (l%8 === 0) {
                self.postMessage({progress: 40*l/len});
            }
        }

        var size = convertSample(0xFFFFFFFF, 4, bin, offset, true);

        var binBuf = new ArrayBuffer(size);
        bin = new DataView(binBuf);

        offset = 0;

        for(l = 0; l < len; l++) {
            lut = luts[l];
            name = lut.name;
            id = getApiID(name, apiMap);
            if (id === -1) {
                throw new Error('failed to find id for lut ' + name);
            } else {
                offset = writeLUT(lut, id, bin, offset);
            }
            if (l%8 === 0) {
                self.postMessage({progress: 40 + 60*l/len});
            }
        }

        convertSample(0xFFFFFFFF, 4, bin, offset);

        self.postMessage({done: true, name: rname, bin: binBuf});
    };
};

},{}]},{},[5]);
