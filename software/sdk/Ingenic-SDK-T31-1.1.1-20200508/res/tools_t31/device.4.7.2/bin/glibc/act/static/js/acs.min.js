/** This confidential and proprietary software/information may be used only
 *         as authorized by a licensing agreement from Apical Limited
 *                (C) COPYRIGHT 2013 - 2015 Apical Limited
 *                          ALL RIGHTS RESERVED
 *       The entire notice above must be reproduced on all authorized
 *        copies and copies may only be made to the extent permitted
 *              by a licensing agreement from Apical Limited.
 */

(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var bundleFn = arguments[3];
var sources = arguments[4];
var cache = arguments[5];

var stringify = JSON.stringify;

module.exports = function (fn) {
    var keys = [];
    var wkey;
    var cacheKeys = Object.keys(cache);
    
    for (var i = 0, l = cacheKeys.length; i < l; i++) {
        var key = cacheKeys[i];
        if (cache[key].exports === fn) {
            wkey = key;
            break;
        }
    }
    
    if (!wkey) {
        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);
        var wcache = {};
        for (var i = 0, l = cacheKeys.length; i < l; i++) {
            var key = cacheKeys[i];
            wcache[key] = key;
        }
        sources[wkey] = [
            Function(['require','module','exports'], '(' + fn + ')(self)'),
            wcache
        ];
    }
    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);
    
    var scache = {}; scache[wkey] = wkey;
    sources[skey] = [
        Function(['require'],'require(' + stringify(wkey) + ')(self)'),
        scache
    ];
    
    var src = '(' + bundleFn + ')({'
        + Object.keys(sources).map(function (key) {
            return stringify(key) + ':['
                + sources[key][0]
                + ',' + stringify(sources[key][1]) + ']'
            ;
        }).join(',')
        + '},{},[' + stringify(skey) + '])'
    ;
    
    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;
    
    return new Worker(URL.createObjectURL(
        new Blob([src], { type: 'text/javascript' })
    ));
};

},{}],2:[function(require,module,exports){
var $ = require('../utils/helper');
var state = require('../utils/state');
var handy = require('../utils/handy');

function loadRegFavs() {
    var starred = state.loadStarredRegisters();
    starred.forEach(function (name) {
        var stars = $.$('.star-button[fav-name="' + name + '"]');
        Array.prototype.slice.call(stars).forEach(likeReg);
    });
    if (starred.length > 0) {
        $('#toggle-fav-button').classList.remove('disabled');
    }
}

function loadPageFavs() {
    var starred = state.loadStarredPages();
    for (var i = 0, len = starred.length, name, type, section; i < len; i++) {
        name = starred[i].name;
        type = starred[i].type;
        section = $('.section[section="' + name + '"][type=' + type + ']');
        if (section) {
            section.querySelector('.like-page').classList.add('star-selected');
            likePage(name, type);
        }
    }
}

function saveRegFavs() {
    var starred = $.$('.star-button.star-selected[fav-name]');
    var names = new Set();
    for (var i = 0, len = starred.length; i < len; i++) {
        names.add(starred[i].getAttribute('fav-name'));
    }
    state.saveStarredRegisters(Array.from(names));
}

function savePageFavs() {
    var starred = $.$('.section-link.fav-menu-item[fav-name][type]');
    var data = [];
    for (var i = 0, len = starred.length; i < len; i++) {
        data.push({
            name: starred[i].getAttribute('fav-name'),
            type: starred[i].getAttribute('type')
        });
    }
    state.saveStarredPages(data);
}

function showStarredControls() {
    handy.hideMenus();
    Array.prototype.slice.call($.$('div.container')).forEach(function (container) {
        if (container.querySelector('.star-button.star-selected')) {
            container.classList.remove('hidden');
            Array.prototype.slice.call(container.querySelectorAll('section.section')).forEach(function (section) {
                if (section.querySelector('.star-button.star-selected')) {
                    section.classList.remove('hidden');
                    section.classList.add('in-common');
                    section.querySelector('.page-sub-menu').classList.add('hidden');
                    var registers = section.querySelectorAll('article.control-item');
                    Array.prototype.slice.call(registers).forEach(function (reg) {
                        if (reg.querySelector('.star-button.star-selected')) {
                            reg.classList.remove('hidden');
                        } else {
                            reg.classList.add('hidden');
                        }
                    });
                } else {
                    section.classList.add('hidden');
                }
            });
        } else {
            container.classList.add('hidden');
        }
    });
    document.dispatchEvent(new Event('act-reload-visible'));
}

function hideStar (star) {
    unlikeReg(star);
    setTimeout(function () {
        var reg = star.parentNode;
        reg.classList.add('hidden');
        var section = reg.parentNode;
        if (!section.querySelector('.star-button.star-selected')) {
            section.classList.add('hidden');
            if ($('.star-button.star-selected')) {} else {
                $('#toggle-fav-button').classList.add('disabled');
                setTimeout(handy.returnToTab, 200);
            }
        }
    }, 300);
}

function likeReg (star) {
    star.classList.add('star-selected');
}

function unlikeReg (star) {
    star.classList.remove('star-selected');
}

/**
 * @param {String} name
 * @param {String} type
 * @private
 */
function likePage(name, type) {
    var favsMenu = $('.' + type + '-fav-menu');
    if (favsMenu) {} else {
        return;
    }
    var template = $('#fav-menu-item-template').content;
    var li = template.querySelector('.section-link');
    li.setAttribute('fav-name', name);
    li.setAttribute('type', type);
    li.setAttribute('title', name);
    if (type === 'dynamic' || type == 'static') { // shorten menu item name for calibrations
        li.querySelector('p').innerHTML = name.replace(/^CALIBRATION_/, '');
    } else {
        li.querySelector('p').innerHTML = name;
    }
    var delimiter = favsMenu.querySelector('.menu-delimiter');
    favsMenu.insertBefore(template.cloneNode(true), delimiter);
    if (favsMenu.children.length > 1) {
        if (delimiter.classList.contains('hidden')) {
            delimiter.classList.remove('hidden');
        }
        if (favsMenu.classList.contains('hidden')) {
            favsMenu.classList.remove('hidden');
        }
    }
}

/**
 * @param {String} name
 * @param {String} type
 * @private
 */
function unlikePage(name, type) {
    var favsMenu = $('.' + type + '-fav-menu');
    if (favsMenu) {} else {
        return;
    }
    var one = favsMenu.querySelector('.section-link[fav-name="' + name + '"][type="' + type + '"]');
    if (one) {
        favsMenu.removeChild(one);
        if (favsMenu.children.length === 1) {
            var delimiter = favsMenu.querySelector('.menu-delimiter');
            delimiter.classList.add('hidden');
            favsMenu.classList.add('hidden');
        }
    }
    var page = $('.section[section="' + name + '"][type="' + type + '"]');
    if (page) {
        page.querySelector('.like-page').classList.remove('star-selected');
    }
}

var onStarredPage = function () {
    return $('#toggle-fav-button.star-selected') === null;
};

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function () {

        window.addEventListener('beforeunload', function () {
            if (state.mayBeforeUnload()) {
                saveRegFavs();
                savePageFavs();
            }
        });

        document.addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            var that = event.target;
            var init;
            var wasStarred = that.classList.contains('star-selected');
            var osp = onStarredPage();
            if (that.classList.contains('star-button')) { // clicked on any star button for a register

                if (osp) { // on starred page
                    if (event.shiftKey) {
                        Array.prototype.slice.call($.$('.star-button.star-selected')).forEach(hideStar);
                    } else {
                        hideStar(that);
                    }
                } else {
                    if (event.shiftKey) {
                        Array.prototype.slice.call($.$('div.container:not(.hidden)')).forEach(function (container) {
                            Array.prototype.slice.call(container.querySelectorAll('section.section:not(.hidden)')).forEach(function (section) {
                                var stars = section.querySelectorAll('.star-button');
                                if (wasStarred) {
                                    Array.prototype.slice.call(stars).forEach(unlikeReg);
                                } else {
                                    Array.prototype.slice.call(stars).forEach(likeReg);
                                }
                            });
                        });
                    } else {
                        if (wasStarred) {
                            unlikeReg(that);
                        } else {
                            likeReg(that);
                        }
                    }
                    if ($('.star-button.star-selected')) {
                        $('#toggle-fav-button').classList.remove('disabled');
                    } else {
                        $('#toggle-fav-button').classList.add('disabled');
                    }
                }

            } else if (that.id === 'toggle-fav-button') { // clicked on show/hide starred registers

                if (osp) { // back from starred page
                    that.classList.add('star-selected');
                    setTimeout(handy.returnToTab, 50);
                } else { // switching now to starred page
                    that.classList.remove('star-selected');
                    showStarredControls();
                    document.dispatchEvent(new Event('act-hide-reg-search'));
                }

            } else if (that.classList.contains('like-page')) { // add page to favs clicked (only hw tab)
                that.classList.toggle('star-selected');
                var page = that.parentNode.parentNode.parentNode;
                var name = page.getAttribute('section');
                var type = page.getAttribute('type');
                if (wasStarred) {
                    unlikePage(name, type);
                } else {
                    likePage(name, type);
                }
            } else if (that.classList.contains('fav-menu-item')) { // clicked on menu fav item
                init = {detail: {name: that.getAttribute('fav-name')}};
                document.dispatchEvent(new CustomEvent('act-select-section', init));
            } else if (that.classList.contains('fav-menu-anchor')) { // clicked on menu fav item
                init = {detail: {name: that.parentNode.getAttribute('fav-name')}};
                document.dispatchEvent(new CustomEvent('act-select-section', init));
            } else if (that.classList.contains('fav-menu-toggle')) { // clicked on star in menu fav item
                var item = that.parentNode;
                unlikePage(item.getAttribute('fav-name'), item.getAttribute('type'));
            }
        });

        document.addEventListener('act-clear-user-data', function () {
            var stars = $.$('.star-button.star-selected');
            Array.prototype.slice.call(stars).forEach(unlikeReg);
            $('#toggle-fav-button').classList.add('disabled');
            var pages = $.$('.like-page.star-selected');
            Array.prototype.slice.call(pages).forEach(function (page) {
                page.classList.remove('star-selected');
                var section = page.parentNode.parentNode.parentNode;
                unlikePage(section.getAttribute('section'), section.getAttribute('type'));
            });
        });

        loadRegFavs();

        loadPageFavs();

        return Promise.resolve();

    }

};

},{"../utils/handy":35,"../utils/helper":36,"../utils/state":39}],3:[function(require,module,exports){
var $ = require('../utils/helper');

var counter = 0;

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function () {

        document.addEventListener('act-error', function (event) {
            var error = event.detail;
            var status = $('#srv-status');
            status.classList.remove('srv-status-ok');
            status.classList.add('srv-status-fail');
            status.innerHTML = error.text;
            var list = $('.error-list');
            if (list) {
                var line = $('#error-list-item-template').content;
                line.querySelector('.error-timestamp').innerHTML = new Date().toISOString() + ': ';
                line.querySelector('.error-message-content').innerHTML = error.text;
                list.insertBefore(line.cloneNode(true), list.childNodes[0]);
            }
            var ec = $('#error-count');
            if (ec) {
                if (ec.classList.contains('hidden')) {
                    ec.classList.remove('hidden');
                }
                counter++;
                ec.innerHTML = (counter + ' errors');
            }
        });

        document.addEventListener('act-ok', function () {
            var status = $('#srv-status');
            status.classList.remove('srv-status-fail');
            status.classList.add('srv-status-ok');
            status.innerHTML = 'success';
        });

        return Promise.resolve();

    },

    /**
     * @param {String} error
     */
    ERROR: function (error) {
        var init;
        init = {detail: {text: error}};
        document.dispatchEvent(new CustomEvent('act-error', init));
    },

    /**
     * @param {String} error
     */
    FATAL: function (error) {
        var init;
        init = {detail: {text: error}};
        document.dispatchEvent(new CustomEvent('act-error', init));
    },

    /**
     */
    OK: function () {
        document.dispatchEvent(new Event('act-ok'));
    }

};

},{"../utils/helper":36}],4:[function(require,module,exports){
var $ = require('../utils/helper');
var ajax = require('../utils/ajax');
var state = require('../utils/state');
var handler = require('../common/handler');

var Queue = function () {};

/**
 * @private
 */
function __init() {
    Queue.hw = {};
    Queue.api = {};
    Queue.counter = 0;
    Queue.interval = null;
}

/**
 * @private
 */
function __poll () {
    ajax.hwPoll(Queue.hw).catch(handler.ERROR);
    ajax.fwPoll(Queue.api).catch(handler.ERROR);
}

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function () {

        __init();

        document.addEventListener('act-polling', function (event) {
            var data = event.detail;
            var control = data.control;
            var type = data.type;
            if (control && ['hw', 'api'].indexOf(type) >= 0) {
                var que = Queue[type], reference;
                var command = control.getAttribute('command');
                switch (type) {
                    case 'hw':
                        reference = command;
                        break;
                    case 'api':
                        var section = control.getAttribute('section');
                        reference = section + ':' + command;
                        break;
                    default: return;
                }
                var button;
                if (reference in que) { // remove from polling
                    control.querySelector('.reload-button').classList.remove('polling');
                    delete que[reference];
                    Queue.counter--;
                    button = $('#stop-polling-button');
                    $('.toolbar-text').innerHTML = Queue.counter ? Queue.counter : '';
                    if (Queue.counter <= 0) {
                        clearInterval(Queue.interval);
                        __init();
                        button.classList.add('disabled');
                        button.classList.remove('polling');
                        button.innerHTML = '';
                    }
                } else { // add to polling
                    control.querySelector('.reload-button').classList.add('polling');
                    switch (type) {
                        case 'hw':
                            que[reference] = {
                                type: control.getAttribute('reg-type'),
                                offset: parseInt(control.getAttribute('offset')),
                                size: parseInt(control.getAttribute('sz'))
                            };
                            break;
                        case 'api':
                            que[reference] = {
                                section: parseInt(control.getAttribute('section')),
                                command: parseInt(command)
                            };
                            break;
                        default: return;
                    }
                    Queue.counter++;
                    if (Queue.interval === null) {
                        Queue.interval = setInterval(__poll, state.getPollingPace());
                        button = $('#stop-polling-button');
                        button.classList.remove('disabled');
                        button.classList.add('polling');
                    }
                    $('.toolbar-text').innerHTML = Queue.counter ? Queue.counter : '';
                }
            }
        });

        document.addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            var that = event.target;
            if (that.id === 'stop-polling-button') {
                clearInterval(Queue.interval);
                __init();
                $('#stop-polling-button').classList.add('disabled');
                $('.toolbar-text').innerHTML = '';
                Array.prototype.slice.call($.$('.polling')).forEach(function (some) {
                    some.classList.remove('polling');
                });
            }
        });

        return Promise.resolve();

    }

};

},{"../common/handler":3,"../utils/ajax":32,"../utils/helper":36,"../utils/state":39}],5:[function(require,module,exports){
var $ = require('../utils/helper');
var ajax = require('../utils/ajax');
var calc = require('../utils/calc');
var state = require('../utils/state');

var handler = require('../common/handler');

function showPopup(popup) {
    popup.classList.remove('hidden');
    popup.parentNode.classList.add('frozen');
}

function hidePopup(popup) {
    popup.classList.add('hidden');
    popup.parentNode.classList.remove('frozen');
}

/**
 * @param {Object} sheet
 * @param {Object} ctrl
 * @param {Array} [data]
 * @private
 */
function __display_array(sheet, ctrl, data) {
    var radix = 10, pad = ' ', padFunction = String.prototype.padRight, split = ' ';
    var table = ctrl.querySelector('.array-table');
    if (table.classList.contains('hex')) {
        sheet.classList.add('hex');
        radix = 16; pad = '0'; padFunction = String.prototype.padLeft; split = '  ';
    }
    sheet.setAttribute('command', ctrl.getAttribute('command'));
    sheet.setAttribute('type', ctrl.getAttribute('type'));
    var max = parseInt(ctrl.getAttribute('max'));
    var ln = max.toString(radix).length;
    var padding = new Array(ln + 1).join(pad);
    if (Array.isArray(data)) {
        sheet.value = data.reduce(function (text, value, idx) {
            return text + ((idx > 0 ? split : '') + padFunction.apply(value.toString(radix), [padding]));
        }, '');
    } else {
        sheet.value = Array.prototype.slice.call(ctrl.querySelectorAll('.array-cell')).reduce(function (text, cell, idx) {
            return text + ((idx > 0 ? split : '') + padFunction.apply(cell.innerHTML.toString(), [padding]));
        }, '');
    }

}

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function () {

        document.addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            var that = event.target;
            var popup, sheet, ctrl, command, type, max, nodes;
            if (that.classList.contains('edit-array-button')) {
                popup = $('.popup.array-popup');
                ctrl = that.parentNode;
                sheet = popup.querySelector('.array-spread-sheet');
                __display_array(sheet, ctrl);
                popup.querySelector('.popup-info').innerHTML = ctrl.getAttribute('display-text');
                showPopup(popup);
            } else if (that.classList.contains('dialog-apply-btn')) {
                popup = $('.popup.array-popup');
                sheet = popup.querySelector('.array-spread-sheet');
                var text = sheet.value.toString().replace(/[\s,;\n]+/g, ',');
                var radix = parseInt(sheet.hasAttribute('hex') ? 16 : 10);
                command = sheet.getAttribute('command');
                type = sheet.getAttribute('type');
                var data;
                switch (type) {
                    case 'hw': // hw array or lut
                        ctrl = $('.control-item[command="' + command + '"][type=hw]');
                        nodes = parseInt(ctrl.getAttribute('nodes'));
                        max = parseInt(ctrl.getAttribute('max'));
                        data = text.split(',').splice(0, nodes).map(function (item) {
                            var x = parseInt(item, radix);
                            if  (isNaN(x) || x < 0 || x > max) {
                                return 0; // TODO return default value
                            } else {
                                return x;
                            }
                        });
                        var bits = parseInt(ctrl.getAttribute('bits'));
                        var align = parseInt(ctrl.getAttribute('align'));
                        ajax.hwWrite(null, ctrl.getAttribute('reg-type'), parseInt(ctrl.getAttribute('offset')), calc.arrayToBytes(data, bits, align))
                        .then(function (bytes) {
                            var init;
                            init = {
                                detail: {
                                    command: command,
                                    bytes: bytes
                                }
                            };
                            document.dispatchEvent(new CustomEvent('act-hw-value-changed', init));
                            __display_array(sheet, ctrl, calc.bytesToArray(bytes, bits, align));
                        })
                        .catch(handler.ERROR);
                        break;
                    case 'static': // calibrations
                    case 'dynamic':
                        ctrl = $('.control-item[command="' + command + '"][type="' + type + '"]');
                        max = parseInt(ctrl.getAttribute('max'));
                        nodes = parseInt(ctrl.getAttribute('nodes'));
                        data = text.split(',').splice(0, nodes).map(function (item) {
                            var x = parseInt(item, radix);
                            if  (isNaN(x) || x < 0 || x > max) {
                                return 0; // TODO return default value
                            } else {
                                return x;
                            }
                        });
                        var width = parseInt(ctrl.getAttribute('sz')) * 8;
                        var page = parseInt(command);
                        var bytes = calc.arrayToBytes(data, width, width);
                        ajax.fwSaveArray(page, bytes)
                        .then(function () {
                            var init;
                            init = {
                                detail: {
                                    page: page,
                                    bytes: bytes
                                }
                            };
                            document.dispatchEvent(new CustomEvent('act-calibration-value-changed', init));
                            __display_array(sheet, ctrl, calc.bytesToArray(bytes, width, width));
                        })
                        .catch(handler.ERROR);
                        break;
                    default: break;
                }
            } else if (that.classList.contains('dialog-reload-btn')) {
                popup = $('.popup.array-popup');
                sheet = popup.querySelector('.array-spread-sheet');
                type = sheet.getAttribute('type');
                command = sheet.getAttribute('command');
                var sz;
                switch (type) {
                    case 'hw': // hw array or lut
                        ctrl = $('.control-item[command="' + command + '"][type=hw]');
                        sz = parseInt(ctrl.getAttribute('sz'));
                        ajax.hwRead(null, ctrl.getAttribute('reg-type'), parseInt(ctrl.getAttribute('offset')), sz)
                        .then(function (bytes) {
                            var init;
                            init = {
                                detail: {
                                    command: command,
                                    bytes: bytes
                                }
                            };
                            document.dispatchEvent(new CustomEvent('act-hw-value-changed', init));
                            var bits = parseInt(ctrl.getAttribute('bits'));
                            var align = parseInt(ctrl.getAttribute('align'));
                            __display_array(sheet, ctrl, calc.bytesToArray(bytes, bits, align));
                        })
                        .catch(handler.ERROR);
                        break;
                    case 'static': // calibrations
                    case 'dynamic':
                        ctrl = $('.control-item[command="' + command + '"][type="' + type + '"]');
                        max = parseInt(ctrl.getAttribute('max'));
                        nodes = parseInt(ctrl.getAttribute('nodes'));
                        sz = parseInt(ctrl.getAttribute('sz'));
                        var pg = parseInt(command);
                        ajax.fwLoadArray(pg, sz * nodes)
                        .then(function (bytes) {
                            var width = sz * 8;
                            __display_array(sheet, ctrl, calc.bytesToArray(bytes, width, width));
                        })
                        .catch(handler.ERROR);
                        break;
                    default: break;
                }
            } else if (that.classList.contains('dialog-close-btn')) {
                popup = $('.popup:not(.hidden)');
                hidePopup(popup);
            }
        });

        document.addEventListener('act-ask-user', function (event) {

            var data = event.detail;
            var question = data.question;
            var yes = data.yes;
            var no = data.no;

            if (typeof question === 'string' && typeof yes === 'function' && typeof no === 'function') {

                var popup = $('.ask-user-popup');
                popup.querySelector('.dialog-message').innerHTML = question;
                var yesBtn = popup.querySelector('.dialog-yes-btn');
                var noBtn = popup.querySelector('.dialog-no-btn');

                var yesWrapper = function (event) {
                    if (event.button !== 0) { // only left button
                        return;
                    }
                    hidePopup(popup);
                    yesBtn.removeEventListener('click', yesWrapper);
                    noBtn.removeEventListener('click', noWrapper);
                    yes();
                };

                var noWrapper = function (event) {
                    if (event.button !== 0) { // only left button
                        return;
                    }
                    hidePopup(popup);
                    yesBtn.removeEventListener('click', yesWrapper);
                    noBtn.removeEventListener('click', noWrapper);
                    no();
                };

                yesBtn.addEventListener('click', yesWrapper);
                noBtn.addEventListener('click', noWrapper);

                showPopup(popup);

            }

        });

        document.addEventListener('act-popup-progress', function (event) {
            var popup = $('.progress-popup');
            popup.querySelector('.dialog-message').innerHTML = event.detail;
            showPopup(popup);
        });

        document.addEventListener('act-cover-progress', function () {
            var popup = $('.progress-popup');
            var progress = popup.querySelector('#modal-progress');
            progress.value = 0;
            progress.max = 100;
            popup.querySelector('.dialog-message').innerHTML = '';
            hidePopup(popup);
        });

        document.addEventListener('act-popup-errors', function () {
            var popup = $('.errors-popup');
            showPopup(popup);
        });

        document.addEventListener('act-popup-settings', function () {
            var popup = $('.settings-popup');
            var cfg;
            cfg = popup.querySelector('#cfg-fancy-json');
            cfg.checked = state.fancyJSON();
            cfg.setAttribute('original-value', state.fancyJSON().toString());
            cfg = popup.querySelector('#cfg-polling-pace');
            cfg.value = state.getPollingPace();
            cfg.setAttribute('original-value', state.getPollingPace().toString());
            showPopup(popup);
        });

        document.addEventListener('act-popup-about', function () {
            var popup = $('.about-popup');
            ajax.get('/about')
            .then(function (data) {
                var holder = $('#key-value-holder-template').content;
                var list = holder.querySelector('.key-value-holder').cloneNode(true);
                popup.querySelector('.dialog-content').innerHTML = '';
                popup.querySelector('.dialog-content').appendChild(list);
                var item = $('#key-value-item-template').content;
                for (var key in data) if (data.hasOwnProperty(key)) {
                    item.querySelector('.kv-item-name').innerHTML = key;
                    item.querySelector('.kv-item-value').innerHTML = data[key];
                    list.appendChild(item.cloneNode(true));
                }
                showPopup(popup);
                handler.OK();
            })
            .catch(function (error) {
                hidePopup(popup);
                handler.ERROR(error);
            });
        });

        return Promise.resolve();

    }

};

},{"../common/handler":3,"../utils/ajax":32,"../utils/calc":33,"../utils/helper":36,"../utils/state":39}],6:[function(require,module,exports){
var $ = require('../utils/helper');
var handy = require('../utils/handy');

function hideRegSearch () {
    var edit = $('#reg-search');
    edit.value = '';
    edit.style.cursor = 'pointer';
    $('#clear-reg-search').classList.add('search-hidden');
    $('.main-search-holder').classList.remove('long-search');
}

function restoreCurrentMenu() {
    Array.prototype.slice.call($.$('.menu')).forEach(function (menu) {
        menu.classList.add('hidden');
    });
    document.dispatchEvent(new Event('act-restore-menu'));
}

var SEARCH_QUERY_REGEX = /^[A-Za-z0-9\s\-_]*$/;

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function () {

        $('#reg-search').value = '';

        $('#reg-search').addEventListener('focus', function () {
            var edit = $('#reg-search');
            edit.style.cursor = 'text';
            $('.main-search-holder').classList.add('long-search');
            $('#clear-reg-search').classList.remove('search-hidden');
        });

        $('#clear-reg-search').addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            hideRegSearch();
            $('#reg-search').dispatchEvent(new Event('input'));
        });

        $('#reg-search').addEventListener('input', function (event) {
            var that = event.target;
            var query = that.value.toLowerCase().replace(/_/g, ' ').replace(/-/g, ' ');
            if (query.match(SEARCH_QUERY_REGEX) === null) {
                that.classList.add('bad-search');
                return;
            } else {
                that.classList.remove('bad-search');
            }
            var ln = query.length;
            if (ln > 2) {
                handy.hideMenus();
                Array.prototype.slice.call($.$('div.container')).forEach(function (container) {
                    var ql = 'article.control-item[search*="' + query + '"]';
                    if (container.querySelector(ql)) {
                        Array.prototype.slice.call(container.querySelectorAll('section.section')).forEach(function (section) {
                            if (section.querySelector(ql)) {
                                section.querySelector('.page-sub-menu').classList.add('hidden');
                                section.classList.add('in-common');
                                Array.prototype.slice.call(section.querySelectorAll('article.control-item')).forEach(function (ctrl) {
                                    var srch = ctrl.getAttribute('search');
                                    if (srch.includes(query)) {
                                        ctrl.classList.remove('hidden');
                                    } else {
                                        ctrl.classList.add('hidden');
                                    }
                                });
                                section.classList.remove('hidden');
                            } else {
                                section.classList.add('hidden');
                            }
                        });
                        container.classList.remove('hidden');
                    } else {
                        container.classList.add('hidden');
                    }
                });
                document.dispatchEvent(new Event('act-reload-visible'));
            } else if (ln === 0) {
                setTimeout(handy.returnToTab, 50);
            }
        });

        $('#clear-menu-search').addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            var that = $('#menu-search');
            that.value = '';
            that.dispatchEvent(new Event('input'));
        });

        $('#menu-search').addEventListener('input', function (event) {
            var that = event.target;
            var query = that.value.toLowerCase().replace(/_/g, ' ').replace(/-/g, ' ');
            if (query.match(SEARCH_QUERY_REGEX) === null) {
                that.classList.add('bad-search');
                return;
            } else {
                that.classList.remove('bad-search');
            }
            var ln = query.length;
            if (ln > 2) {
                Array.prototype.slice.call($.$('.menu:not(.hidden)')).forEach(function (menu) {
                    if (menu.querySelector('.section-link[search*="' + query + '"]')) {
                        Array.prototype.slice.call(menu.querySelectorAll('.section-link[search]')).forEach(function (item) {
                            var srch = item.getAttribute('search');
                            if (srch.includes(query)) {
                                item.classList.remove('hidden');
                            } else {
                                item.classList.add('hidden');
                            }
                        });
                        menu.classList.remove('hidden');
                    } else {
                        menu.classList.add('hidden');
                    }
                });
            } else {
                restoreCurrentMenu();
            }
        });

        document.addEventListener('act-hide-reg-search', hideRegSearch);

        document.addEventListener('keydown', function (event) {
            var that = event.target;
            var key = event.keyCode || event.which;
            if (that.classList.contains('search')) {
                if (key === 27) { // Esc
                    that.value = '';
                    that.dispatchEvent(new Event('input'));
                }
            }
        });

        document.addEventListener('blur', function (event) {
            var that = event.target;
            if (!('classList' in that)) {
                return;
            }
            if (that.id === 'reg-search' && that.value.length < 3) {
                hideRegSearch();
            } else if (that.id === 'menu-search' && that.value.length < 3) {
                restoreCurrentMenu();
            }
        }, true);

        return Promise.resolve();

    }

};

},{"../utils/handy":35,"../utils/helper":36}],7:[function(require,module,exports){
var $ = require('../utils/helper');
var state = require('../utils/state');

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function () {

        document.addEventListener('change', function (event) {
            var that = event.target;
            if (that.classList.contains('tab-radio')) { // switch between tabs
                if (that.checked) {
                    var name = that.value;
                    Array.prototype.slice.call($.$('.container:not(.' + name + '-controls):not(.hidden)')).forEach(function (container) {
                        container.classList.add('hidden');
                    });
                    var tab = $('.container.' + name + '-controls.hidden');
                    if (tab) {
                        tab.classList.remove('hidden');
                    }
                    Array.prototype.slice.call($.$('.menu:not(.' + name + '-fav-menu):not(.hidden)')).forEach(function (container) {  // page fav menu
                        container.classList.add('hidden');
                    });
                    Array.prototype.slice.call($.$('.menu:not(.' + name + '-menu):not(.hidden)')).forEach(function (container) {  // main menu
                        container.classList.add('hidden');
                    });
                    var fmenu = $('.menu.' + name + '-fav-menu.hidden'); // page fav menu
                    if (fmenu) {
                        fmenu.classList.remove('hidden');
                    }
                    var menu = $('.menu.' + name + '-menu.hidden'); // main menu
                    if (menu) {
                        menu.classList.remove('hidden');
                    }
                    $('.menu-top').classList.remove('hidden');
                    $('#toggle-fav-button').classList.add('star-selected');
                    document.dispatchEvent(new Event('act-select-last-menu-item'));
                    state.setSelectedTab(name);
                }
            }
        }, true);

        return Promise.resolve();

    }

};

},{"../utils/helper":36,"../utils/state":39}],8:[function(require,module,exports){
var $ = require('../utils/helper');
var ajax = require('../utils/ajax');
var handy = require('../utils/handy');
var calc = require('../utils/calc');
var handler = require('../common/handler');

/**
 * @param {Object} that
 * @private
 */
function restoreValue (that) {
    that.innerHTML = that.getAttribute('original-value');
    sealCell(that);
}

/**
 * @param {Object} that
 * @param {String} [value]
 * @private
 */
function sealCell(that, value) {
    that.removeAttribute('original-value');
    that.classList.remove('cell-editable');
    that.removeAttribute('contenteditable');
}

var inSearchMode = function () {
    return $('div.main-search-holder.long-search') !== null;
};

/**
 * @param {Element} that
 */
function leaveCell (that) {

    var idx = parseInt(that.getAttribute('index'));
    var list = that.parentNode;
    var ctrl = list.parentNode;
    var radix = list.classList.contains('hex') ? 16 : 10;
    var value = parseInt(that.innerHTML, radix);
    var max = parseInt(ctrl.getAttribute('max'));
    if (isNaN(value) || value < 0 || value > max ) {
        that.innerHTML = that.getAttribute('original-value');
        return;
    }
    var bits, align, offset = parseInt(ctrl.getAttribute('offset'));
    Promise.resolve()
    .then(function () {
        var data;
        if (isNaN(offset)) { // fw calibration
            bits = 8 * parseInt(ctrl.getAttribute('sz'));
            align = bits;
            var items = list.querySelectorAll('.array-cell');
            data = [];
            Array.prototype.slice.call(items).forEach(function (item) {
                Array.prototype.push.apply(data, calc.itemToBytes(parseInt(item.innerHTML, radix), bits, align));
            });
        } else { // hw array or lut
            bits = parseInt(ctrl.getAttribute('bits'));
            align = parseInt(ctrl.getAttribute('align'));
            data = calc.itemToBytes(value, bits, align);
        }
        return Promise.resolve(data);
    })
    .then(function (data) {
        if (data === null) {
            return Promise.resolve(null);
        }
        if (isNaN(offset)) { // fw calibration
            return ajax.fwSaveArray(parseInt(ctrl.getAttribute('command')), data)
            .then(function () {
                return calc.itemToBytes(value, bits, align);
            });
        } else { // hw array or lut
            return ajax.hwWrite(null, ctrl.getAttribute('reg-type'), offset + (align >> 3) * idx, data);
        }
    })
    .then(function (bytes) {
        if (bytes === null) {
            restoreValue(that);
        } else {
            var res = calc.bytesToItem(bytes, bits, align);
            if (res === null) {
                restoreValue(that);
            } else {
                sealCell(that, res.toString(radix));
            }
        }
    })
    .catch(function (error) {
        handler.ERROR(error);
        restoreValue(that);
    });

}

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function () {

        document.addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            var that = event.target;
            if (that.classList.contains('array-cell')) {
                event.preventDefault();
                that.setAttribute('contenteditable', '');
                var value = parseInt(that.innerHTML);
                if (isNaN(value)) {
                    value = 0;
                }
                that.setAttribute('original-value', value.toString());
                that.classList.add('cell-editable');
                that.focus();
            }
        });

        document.addEventListener('keypress', function (event) {
            var that = event.target;
            var key = event.keyCode || event.which;
            if (that.classList.contains('array-cell') && key === 13) { // Enter
                event.preventDefault();
                leaveCell(that);
            }
        });

        document.addEventListener('keydown', function (event) {
            var that = event.target;
            var key = event.keyCode || event.which;
            if (that.classList.contains('array-cell')) {
                if (key === 27) { // Esc
                    event.preventDefault();
                    restoreValue(that);
                }
            }
        });

        document.addEventListener('blur', function (event) {
            var that = event.target;
            if (!('classList' in that)) {
                return;
            }
            if (that.classList.contains('array-cell')) {
                event.preventDefault();
                leaveCell(that);
            }
        }, true);

        document.addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            var that = event.target;
            if (that.classList.contains('radix-button')) {
                var ctrl = that.parentNode;
                that.classList.toggle('hex');
                var txt = ctrl.querySelector('input.val-text');
                if (txt) { // for bytes
                    txt.classList.toggle('hex');
                    if (txt.classList.contains('hex')) {
                        txt.value = parseInt(txt.value, 10).toString(16);
                    } else {
                        txt.value = parseInt(txt.value, 16).toString(10);
                    }
                } else {
                    var table = ctrl.querySelector('.array-table');
                    if (table) { // for arrays
                        table.classList.toggle('hex');
                        var max = parseInt(table.getAttribute('max'));
                        var sw;
                        if (table.classList.contains('hex')) {
                            sw = (max.toString(16).length + 1) + 'ex';
                            Array.prototype.slice.call(table.childNodes).forEach(function (cell) {
                                cell.innerHTML = parseInt(cell.innerHTML, 10).toString(16);
                                cell.style.width = sw;
                            });
                        } else {
                            sw = (max.toString(10).length + 1) + 'ex';
                            Array.prototype.slice.call(table.childNodes).forEach(function (cell) {
                                cell.innerHTML = parseInt(cell.innerHTML, 16).toString(10);
                                cell.style.width = sw;
                            });
                        }
                    }
                }
            } else if (that.tagName.toLowerCase() === 'h3' && that.classList.contains('s-header')) {
                var section = that.parentNode.parentNode;
                if (section && section.classList.contains('in-common')) {
                    if (inSearchMode()) {
                        document.dispatchEvent(new Event('act-hide-reg-search'));
                    }
                    var name = section.getAttribute('section');
                    handy.showTab(section.getAttribute('type'));
                    var init;
                    init = {detail: {name: name}};
                    document.dispatchEvent(new CustomEvent('act-select-section', init));
                }

            } else if (that.classList.contains('bit-switcher')) {
                var check = that.parentNode.querySelector('.data-bit');
                if (check) {
                    check.click();
                }
            }
        });

        $('#read-all-button').addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            document.dispatchEvent(new Event('act-reload-visible'));
        });

        return Promise.resolve();

    }

};

},{"../common/handler":3,"../utils/ajax":32,"../utils/calc":33,"../utils/handy":35,"../utils/helper":36}],9:[function(require,module,exports){

/**
 * fixme
 * this is workaround for <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1016720">1016720</a>
 */
(function () {
    var templates = document.querySelectorAll('template');
    if (templates.length === 0) {
        return;
    }
    var pass = true;
    for (var i = 0; i < templates.length; i++) {
        if (templates[i].childNodes.length !== 0) {
            pass = false;
            break;
        }
    }
    if (pass) { // polyfill un-needed
        return;
    }
    for (var j = 0; j < templates.length; j++) {
        var children = templates[j].childNodes;
        for (var c = 0; c < children.length; c++) {
            templates[j].content.appendChild(children[c].cloneNode(true));
        }
        while (templates[j].hasChildNodes()) {
            templates[j].removeChild(templates[j].childNodes[0]);
        }
    }
})();


},{}],10:[function(require,module,exports){
var $ = require('../utils/helper');
var handler = require('../common/handler');
var state = require('../utils/state');
var handy = require('../utils/handy');

var types = require('./types');

function getMode(canGet, canSet) {
    if (canGet && canSet) {
        return 'RW';
    } else if (canGet) {
        return 'RO';
    } else if (canSet) {
        return 'WO';
    } else {
        return 'NA';
    }
}

function selectMenuItem(name) {
    var item = $('.section-link[section=' + name + '][type=api]');
    var section = $('.section[section=' + name + '][type=api]');
    if (item && section) {
        handy.clearMenuItemSelection();
        handy.hideSections();
        state.api.setSelectedSectionName(name);
        state.navigation.addStep('api', name);
        item.classList.add('selected-item');
        section.classList.remove('hidden');
        section.querySelector('.page-sub-menu').classList.remove('hidden');
        var controls = section.querySelectorAll('.control-item');
        Array.prototype.slice.call(controls).forEach(function (reg) {
            reg.classList.remove('hidden');
        });
        document.dispatchEvent(new Event('act-reload-visible'));
        $('.content').scrollTop = 0;
    }
}

function createApiSection(editor, scode, commands) {

    var cmd, coptions, canGet, canSet, name, id, child, holder, mode, ccode, v;

    var template = $('#api-ctrl-template').content;
    var article = template.querySelector('.control-item');
    var range = template.querySelector('.data-range');
    var text = template.querySelector('.val-text');
    var check = template.querySelector('.data-bit');
    var reload = template.querySelector('.reload-button');
    var star = template.querySelector('.star-button');
    var label = template.querySelector('.cmd-label');
    var hint = template.querySelector('.bit-hint');
    var et = $('#api-enum-template').content;
    var l = et.querySelector('.radio-label');
    var radio = l.querySelector('input');
    var lt = l.querySelector('span');

    for (var cname in commands) if (commands.hasOwnProperty(cname)) {
        cmd = commands[cname];
        canGet = cmd.dir.includes('GET');
        canSet = cmd.dir.includes('SET');
        mode = getMode(canGet, canSet);
        ccode = cmd.value;
        article.setAttribute('section', scode.toString());
        article.setAttribute('command', ccode.toString());
        article.setAttribute('display-text', cname);
        article.setAttribute('search', cname.toLowerCase().replace(/_/g, ' '));
        star.setAttribute('fav-name', cname);
        article.setAttribute('data-mode', mode);
        if (mode === 'RO') {
            reload.classList.remove('hidden');
            check.setAttribute('disabled', 'disabled');
            text.setAttribute('disabled', 'disabled');
            range.setAttribute('disabled', 'disabled');
        } else if (mode === 'RW') {
            reload.classList.remove('hidden');
            check.removeAttribute('disabled');
            text.removeAttribute('disabled');
            range.removeAttribute('disabled');
        } else { // do not show WO registers or the ones without access attribute set
            continue;
        }
        label.innerHTML = cname;
        label.setAttribute('title', cname);
        coptions = cmd.options;
        if (Object.keys(coptions).length === 0) { // not enum
            id = scode + '-' + ccode;
            var maxValue = ('max' in cmd) ? parseInt(cmd.max) : 0xffffffff;
            label.setAttribute('for', id);
            if (maxValue === 1) { // bit
                check.setAttribute('id', id);
                article.setAttribute('data-type', 'bit');
                child = editor.appendChild(article.cloneNode(true));
                child.removeChild(child.querySelector('.data-range'));
                child.removeChild(child.querySelector('.val-text'));
                child.removeChild(child.querySelector('.enum-holder'));
                child.removeChild(child.querySelector('.bit-hint'));
                child.removeChild(child.querySelector('.radix-button'));
            } else { // uint
                text.setAttribute('id', id);
                article.setAttribute('data-type', 'uint');
                range.setAttribute('max', maxValue.toString());
                hint.innerHTML = (Math.round(Math.log(maxValue)*Math.LOG2E)).toString();
                child = editor.appendChild(article.cloneNode(true));
                child.removeChild(child.querySelector('.enum-holder'));
                child.removeChild(child.querySelector('.bit-switcher'));
                child.removeChild(child.querySelector('.data-bit'));
            }
        } else { // enum
            article.setAttribute('data-type', 'enum');
            child = editor.appendChild(article.cloneNode(true));
            child.removeChild(child.querySelector('.data-range'));
            child.removeChild(child.querySelector('.val-text'));
            child.removeChild(child.querySelector('.bit-switcher'));
            child.removeChild(child.querySelector('.data-bit'));
            child.removeChild(child.querySelector('.bit-hint'));
            child.removeChild(child.querySelector('.radix-button'));
            holder = child.querySelector('.enum-holder');
            name = (scode + '-' + ccode);
            for (var opt in coptions) if (coptions.hasOwnProperty(opt)) {
                v = coptions[opt].value;
                id = 'api-' + name + '-' + v;
                radio.setAttribute('id', id);
                radio.setAttribute('name', name);
                radio.setAttribute('type', 'radio');
                radio.value = v;
                l.setAttribute('for', id);
                lt.innerHTML = opt;
                holder.appendChild(et.cloneNode(true));
            }
        }
    }
}

function dropFW() {
    state.api.drop();
    $('.api-menu').innerHTML = '';
    var display = $('.api-controls');
    display.innerHTML = '';
    display.classList.add('hidden');
    $('.tab-label[for="api-tab"]').classList.add('hidden');
    $('#drop-fw-api').classList.add('disabled');
}

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function () {

        document.addEventListener('act-select-last-menu-item', function () {
            if (handy.isApiTabSelected()) {
                if (state.api.hasSelectedSection()) {
                    selectMenuItem(state.api.getSelectedSectionName());
                } else {
                    var first = $('.section-link[type=api]');
                    if (first) {
                        selectMenuItem(first.getAttribute('section'));
                    }
                }
            }
        });

        document.addEventListener('act-select-section', function (event) {
            if (handy.isApiTabSelected()) {
                var data = event.detail;
                var name = data.name;
                selectMenuItem(name);
            }
        });

        document.addEventListener('act-fw-api-loaded', function () { // create api controls and trigger calibrations depiction

            var api = state.api.get();
            $('.tab-label[for="api-tab"]').classList.remove('hidden');
            $('#drop-fw-api').classList.remove('disabled');

            var template = $('#api-menu-item-template').content;
            var item = template.querySelector('li.section-link');
            var section = $('#api-section-template').content.querySelector('section.section');
            var header = section.querySelector('h3');

            var scode, clone, commands;

            var menu = $('.api-menu');
            var display = $('.api-controls');
            for(var sname in api.sections) if (api.sections.hasOwnProperty(sname)) {
                commands = api.sections[sname].commands;
                if (Object.keys(commands).length > 0) {
                    item.setAttribute('section', sname);
                    item.setAttribute('type', 'api');
                    item.setAttribute('search', sname.toLowerCase().replace(/_/g, ' '));
                    item.innerHTML = sname;
                    menu.appendChild(item.cloneNode(true));
                    header.innerHTML = sname;
                    section.setAttribute('section', sname);
                    scode = api.sections[sname].value;
                    clone = display.appendChild(section.cloneNode(true));
                    clone.setAttribute('type', 'api');
                    createApiSection(clone, scode, commands);
                }
            }

            document.dispatchEvent(new Event('act-select-last-menu-item'));

        });

        document.addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            var that = event.target;
            if (that.classList.contains('section-link') && that.getAttribute('type') ==='api' ) {
                var sname = that.innerHTML;
                selectMenuItem(sname);
            }
        });

        document.addEventListener('act-api-value-changed', function (event) {
            var data = event.detail;
            var section = data.section;
            var command = data.command;
            var value = data.value;
            if (typeof section === 'number' && typeof command === 'number'  && typeof value === 'number' ) {
                var ctrl = $('article.control-item[section="' + section + '"][command="' + command + '"][type=api]');
                if (ctrl) {
                    types.display(ctrl, value)
                }
            }
        });

        document.addEventListener('act-fw-drop', dropFW);

        document.addEventListener('act-restore-menu', function () {
            if (handy.isApiTabSelected()) {
                var menu = $('.api-menu');
                menu.classList.remove('hidden');
                Array.prototype.slice.call(menu.querySelectorAll('.section-link')).forEach(function (node) {
                    node.classList.remove('hidden');
                });
                var fmenu = $('.api-fav-menu');
                fmenu.classList.remove('hidden');
                Array.prototype.slice.call(fmenu.querySelectorAll('.section-link')).forEach(function (node) {
                    node.classList.remove('hidden');
                });
            }
        });

        return Promise.resolve();
    }

};

},{"../common/handler":3,"../utils/handy":35,"../utils/helper":36,"../utils/state":39,"./types":14}],11:[function(require,module,exports){
var $ = require('../utils/helper');
var handy = require('../utils/handy');
var state = require('../utils/state');
var ajax = require('../utils/ajax');
var calc = require('../utils/calc');
var file = require('../utils/file');
var handler = require('../common/handler');

/**
 * @param {Number} page
 * @return {Promise}
 */
function readCalibrationDescription (page) {
    var api = state.api.get();
    if (api) {
        return ajax.fwGetPage(api.sections.TSYSTEM.value, api.sections.TSYSTEM.commands.BUFFER_DATA_TYPE.value, page);
    } else {
        return Promise.reject('No FW API loaded');
    }
}

/**
 * @param {Number} command
 * @param {String} type
 * @private
 * @return {Promise}
 */
function applyDescription(command, type) {
    return readCalibrationDescription(command)
    .then(function (description) {
        var rows = (description & 0x3FFF8000) >> 15;
        var cols = description & 0x00007FFF;
        var size = (description >>> 30) + 1;
        var art = $('article.control-item[command="' + command + '"][type="' + type + '"]');
        var bits = size * 8;
        art.querySelector('p.bit-hint').innerHTML = bits.toString();
        art.setAttribute('rs', rows.toString());
        art.setAttribute('cs', cols.toString());
        art.setAttribute('nodes', (rows * cols).toString());
        art.setAttribute('sz', size);
        art.setAttribute('max', (Math.pow(2, bits) - 1).toString());
    });
}

/**
 * @param {Object} owner
 * @param {Object} calibration
 * @param {String} name
 * @param {String} type
 * @private
 * @return {Promise}
 */
function buildControl (owner, calibration, name, type) {

    var template = $('#calibration-ctrl-template').content;
    var art = template.querySelector('.control-item');
    var star = art.querySelector('.star-button');
    var value = parseInt(calibration.value);

    art.setAttribute('display-text', name);
    art.setAttribute('type', type);
    art.setAttribute('gr', 'calibrations');
    art.setAttribute('command', value.toString());
    art.setAttribute('search', name.toLowerCase().replace(/_/g, ' '));
    star.setAttribute('fav-name', name);
    var clone = art.cloneNode(true);

    var label = clone.querySelector('.cmd-label');
    label.innerHTML = name.replace(/^CALIBRATION_/, '');
    if ('tooltip' in calibration) {
        label.setAttribute('tooltip', calibration.tooltip);
    } else {
        label.setAttribute('title', name);
    }

    owner.appendChild(clone);

    return applyDescription(value, type);

}

function dropCalibrations () {
    $('#save-static-calibrations').classList.add('disabled');
    $('#save-dynamic-calibrations').classList.add('disabled');
    var sd = $('.static-controls');
    sd.innerHTML = '';
    sd.classList.add('hidden');
    var dd = $('.dynamic-controls');
    dd.innerHTML = '';
    dd.classList.add('hidden');
    $('.tab-label[for="static-tab"]').classList.add('hidden');
    $('.tab-label[for="dynamic-tab"]').classList.add('hidden');
    $('.static-menu').innerHTML = '';
    $('.dynamic-menu').innerHTML = '';
}

/**
 * @param {String} name
 * @param {String} type
 * @private
 */
function selectMenuItem(name, type) {
    var sec = $('.section[section="' + name + '"][type="' + type + '"]');
    var item = $('.section-link[section="' + name + '"][type="' + type + '"]');
    if (sec && item) {
        handy.hideSections();
        handy.clearMenuItemSelection();
        state['c' + type].setSelectedSectionName(name);
        state.navigation.addStep(type, name);
        item.classList.add('selected-item');
        sec.classList.remove('hidden');
        sec.querySelector('.control-item').classList.remove('hidden');
        sec.querySelector('.page-sub-menu').classList.remove('hidden');
        document.dispatchEvent(new Event('act-reload-visible'));
        $('.content').scrollTop = 0;
    }
}

/**
 * @param {Object} table
 * @param {Array} data
 * @param {Number} rs
 * @param {Number} cs
 * @param {Number} sz
 */
function showMatrix(table, data, rs, cs, sz) {
    var template = $('#array-cell-template').content;
    var cell = template.querySelector('li');
    var max = Math.pow(2, (sz * 8)) - 1;
    table.innerHTML = '';
    table.setAttribute('max', max.toString());
    table.parentNode.querySelector('.mxn-hint').innerHTML = rs + 'x' + cs;
    var radix = table.classList.contains('hex') ? 16 : 10;
    var cnt = data.length;
    var sw = (max.toString(radix).length + 1) + 'ex';
    for (var i = 0; i < cnt; i++) {
        cell.innerHTML = data[i].toString(radix);
        cell.setAttribute('tooltip', i + '-th element');
        cell.setAttribute('index', i.toString());
        cell.style.width = sw;
        table.appendChild(cell.cloneNode(true));
    }
}

/**
 * @param {Object} calibrations
 * @param {String} type
 * @private
 */
function buildMenu(calibrations, type) {
    var menu = $('.' + type + '-menu');
    var template = $('#api-menu-item-template').content;
    var item = template.querySelector('.section-link');
    for (var name in calibrations) if (calibrations.hasOwnProperty(name)) {
        item.setAttribute('type', type);
        item.setAttribute('search', name.toLowerCase().replace(/_/g, ' '));
        item.setAttribute('section', name);
        item.setAttribute('title', name);
        item.innerHTML = name.replace(/^CALIBRATION_/, '');
        menu.appendChild(item.cloneNode(true));
    }
}

/**
 * @param {Object} calibrations
 * @param {String} type
 * @private
 * @return {Promise}
 */
function buildSections(calibrations, type) {
    var container = $('.' + type + '-controls');
    var template = $('#api-section-template').content;
    var section = template.querySelector('.section');
    var header = section.querySelector('h3');
    var clone;
    var promises = [];
    for (var name in calibrations) if (calibrations.hasOwnProperty(name)) {
        header.innerHTML = name.replace(/^CALIBRATION_/, '');
        section.setAttribute('section', name);
        section.setAttribute('type', type);
        clone = container.appendChild(section.cloneNode(true));
        promises.push(buildControl(clone, calibrations[name], name, type));
    }
    return Promise.all(promises);
}

var isStaticTabSelected = function () {
    return $('div.static-controls.hidden') === null;
};
var isDynamicTabSelected = function () {
    return $('div.dynamic-controls.hidden') === null;
};

/**
 * @param {String} type
 * @param {String} target
 * @param {Object} calibrations
 * @private
 */
function __save_calibrations(type, target, calibrations) {

    var init;
    init = {detail: 'Please wait while operation completes'};
    document.dispatchEvent(new CustomEvent('act-popup-progress', init));

    var keys = Object.keys(calibrations);

    var progress = $('#modal-progress');
    progress.max = keys.length;

    var promises = keys.map(function (key, idx) {
        var page = parseInt(calibrations[key].value);
        var ctrl = $('.control-item[type="' + type + '"][command="' + page + '"]');
        if (ctrl) {
            var sz = parseInt(ctrl.getAttribute('sz'));
            var rs = parseInt(ctrl.getAttribute('rs'));
            var cs = parseInt(ctrl.getAttribute('cs'));
            var ns = parseInt(ctrl.getAttribute('nodes'));
            return ajax.fwLoadArray(page, sz * ns)
            .then(function (bytes) {
                if (idx > progress.value) {
                    progress.value = idx;
                }
                if (Array.isArray(bytes)) {
                    var bits = sz * 8;
                    var value = calc.bytesToArray(bytes, bits, bits);
                    return Promise.resolve({ __comment: key, name: key, width: sz, rows: rs, cols: cs, value: value });
                } else {
                    return Promise.resolve(null);
                }
            });
        } else {
            return Promise.resolve(null);
        }
    });
    Promise.all(promises)
    .then(function (luts) {
        progress.value = progress.max;
        var data = {
            target: target,
            luts: luts
        };
        file.save(type + '-calibrations.json', 'application/json', data);
    })
    .catch(handler.ERROR)
    .then(function () { // finally
        document.dispatchEvent(new Event('act-cover-progress'));
    });
}

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function() {

        document.addEventListener('act-select-last-menu-item', function () {
            var first;
            if (isStaticTabSelected()) {
                if (state.cstatic.hasSelectedSection()) {
                    selectMenuItem(state.cstatic.getSelectedSectionName(), 'static');
                } else {
                    first = $('.section-link[type=static]');
                    if (first) {
                        selectMenuItem(first.getAttribute('section'), 'static');
                    }
                }
            } else if (isDynamicTabSelected()) {
                if (state.cdynamic.hasSelectedSection()) {
                    selectMenuItem(state.cdynamic.getSelectedSectionName(), 'dynamic');
                } else {
                    first = $('.section-link[type=dynamic]');
                    if (first) {
                        selectMenuItem(first.getAttribute('section'), 'dynamic');
                    }
                }
            }
        });

        document.addEventListener('act-select-section', function (event) {
            var data = event.detail;
            var name = data.name;
            if (isStaticTabSelected()) {
                selectMenuItem(name, 'static');
            } else if (isDynamicTabSelected()) {
                selectMenuItem(name, 'dynamic');
            }
        });

        document.addEventListener('act-fw-api-loaded', function () {

            var api = state.api.get();

            if ('calibration' in api) { // we have static calibrations
                var sc = api['calibration'];
                buildMenu(sc, 'static');
                buildSections(sc, 'static')
                .then(function () {
                    $('.tab-label[for="static-tab"]').classList.remove('hidden');
                    $('#save-static-calibrations').classList.remove('disabled');
                    if (isStaticTabSelected()) {
                        document.dispatchEvent(new Event('act-select-last-menu-item'));
                    }
                })
                .catch(handler.FATAL);
            }

            if ('calibration_isp' in api) { // we have dynamic calibrations
                var dc = api['calibration_isp'];
                buildMenu(dc, 'dynamic');
                buildSections(dc, 'dynamic')
                .then(function () {
                    $('.tab-label[for="dynamic-tab"]').classList.remove('hidden');
                    $('#save-dynamic-calibrations').classList.remove('disabled');
                    if (isDynamicTabSelected()) {
                        document.dispatchEvent(new Event('act-select-last-menu-item'));
                    }
                })
                .catch(handler.FATAL);
            }

        });

        document.addEventListener('act-calibration-value-changed', function (event) {
            var data = event.detail;
            var page = data.page;
            var bytes = data.bytes;
            if (typeof page === 'number' && Array.isArray(bytes)) {
                var ctrl = $('article.control-item[command="' + page + '"][gr="calibrations"]');
                if (ctrl) {
                    var type = ctrl.getAttribute('type');
                    if (type === 'static' || type === 'dynamic') {
                        var sz = parseInt(ctrl.getAttribute('sz'));
                        var bits = sz * 8;
                        var value = calc.bytesToArray(bytes, bits, bits);
                        if (value === null) {} else {
                            var rs = parseInt(ctrl.getAttribute('rs'));
                            var cs = parseInt(ctrl.getAttribute('cs'));
                            showMatrix(ctrl.querySelector('.array-table'), value, rs, cs, sz);
                            setTimeout(function () { ctrl.querySelector('.reload-button').classList.remove('reloading'); }, 300);
                            handler.OK();
                        }
                    }
                }
            }
        });

        document.addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            var that = event.target;
            var page, ln, sz, art;
            if (that.classList.contains('section-link')) {
                var name = that.getAttribute('section');
                var type = that.getAttribute('type');
                if (type === 'static') {
                    selectMenuItem(name, type);
                } else if (type === 'dynamic') {
                    selectMenuItem(name, type);
                }
            } else if (that.classList.contains('reload-button')) {
                art = that.parentNode;
                if (art.getAttribute('type') === 'static' || art.getAttribute('type') === 'dynamic') { // read calibration value
                    page = parseInt(art.getAttribute('command'));
                    ln = parseInt(art.getAttribute('nodes'));
                    sz = parseInt(art.getAttribute('sz'));
                    ajax.fwLoadArray(page, ln * sz).catch(handler.ERROR);
                    that.classList.add('reloading');
                }
            }
        });

        document.addEventListener('act-reload-visible', function () {
            var type;
            if (isStaticTabSelected()) {
                type = 'static';
            } else if (isDynamicTabSelected()) {
                type = 'dynamic';
            } else {
                return;
            }
            var sections = $.$('section.section:not(.hidden)[type="' + type + '"]');
            Array.prototype.slice.call(sections).forEach(function (section) {
                var controls = section.querySelectorAll('article.control-item:not(.hidden)');
                Array.prototype.slice.call(controls).forEach(function (art) {
                    var page = parseInt(art.getAttribute('command'));
                    var ln = parseInt(art.getAttribute('nodes'));
                    var sz = parseInt(art.getAttribute('sz'));
                    if (isNaN(page) || isNaN(ln) || isNaN(sz)) {
                        return;
                    }
                    ajax.fwLoadArray(page, ln * sz).catch(handler.ERROR);
                    art.querySelector('.reload-button').classList.add('reloading');
                });
            });
        });

        document.addEventListener('act-restore-menu', function () {
            var menu, fmenu;
            if (isStaticTabSelected()) {
                menu = $('.static-menu');
                fmenu = $('.static-fav-menu');
            } else if (isDynamicTabSelected()) {
                menu = $('.dynamic-menu');
                fmenu = $('.dynamic-fav-menu');
            } else {
                return;
            }
            menu.classList.remove('hidden');
            Array.prototype.slice.call(menu.querySelectorAll('.section-link')).forEach(function (node) {
                node.classList.remove('hidden');
            });
            fmenu.classList.remove('hidden');
            Array.prototype.slice.call(fmenu.querySelectorAll('.section-link')).forEach(function (node) {
                node.classList.remove('hidden');
            });
        });

        document.addEventListener('act-fw-drop', dropCalibrations);

        document.addEventListener('act-save-static-calibrations', function () {
            if (state.api.exists) {
                var calibrations = state.api.get()['calibration'];
                __save_calibrations('static', 'sensor', calibrations);
            }
        });

        document.addEventListener('act-save-dynamic-calibrations', function () {
            if (state.api.exists) {
                var calibrations = state.api.get()['calibration_isp'];
                __save_calibrations('dynamic', 'isp', calibrations);
            }
        });

        return Promise.resolve();

    }

};

},{"../common/handler":3,"../utils/ajax":32,"../utils/calc":33,"../utils/file":34,"../utils/handy":35,"../utils/helper":36,"../utils/state":39}],12:[function(require,module,exports){
var $ = require('../utils/helper');
var ajax = require('../utils/ajax');
var handy = require('../utils/handy');
var state = require('../utils/state');
var handler = require('../common/handler');

function isFwApiValid(api) {
    var basic = api && 'sections' in api && 'TSELFTEST' in api.sections;
    if (basic) {
        var hasCalibrations = ('calibration' in api || 'calibration_isp' in api);
        if (hasCalibrations) {
            var hasSystemValue = 'TSYSTEM' in api.sections && 'value' in api.sections.TSYSTEM;
            if (hasSystemValue) {
                var bdt = 'commands' in api.sections.TSYSTEM && 'BUFFER_DATA_TYPE' in api.sections.TSYSTEM.commands;
                if (bdt) {
                    return 'value' in api.sections.TSYSTEM.commands.BUFFER_DATA_TYPE;
                }
            }
            return false;
        } else {
            return true;
        }
    } else {
        return false;
    }
}

/**
 * @return {Promise}
 */
function tryLoadApi() {
    return ajax.get('/command.json')
    .then(function (api) {
        state.api.cache(api);
        return Promise.resolve(isFwApiValid(api));
    })
    .then(function (valid) {
        if (valid) {
            document.dispatchEvent(new Event('act-fw-api-loaded'));
        } else {
            document.dispatchEvent(new Event('act-fw-drop'));
            handler.ERROR('FW API file is invalid');
        }
    })
    .catch(function (error) {});
}

function dropFW() {
    ajax.fwDeleteApi().catch(handler.ERROR);
}

/**
 * @param {Element} that
 * @param {Object} ctrl
 */
function leaveCell (that, ctrl) {
    var section = parseInt(ctrl.getAttribute('section'));
    var command = parseInt(ctrl.getAttribute('command'));
    var value;
    if (that.classList.contains('hex')) {
        value = parseInt(that.value, 16);
    } else {
        value = parseInt(that.value, 10);
    }
    if (!isNaN(value)) {
        ajax.fwSet(section, command, value).catch(handler.ERROR);
        ctrl.querySelector('.reload-button').classList.add('reloading');
    }
}

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function () {

        document.addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            var that = event.target;
            var ctrl, section, command, value;
            if (that.classList.contains('reload-button')) { // read fw api register
                ctrl = that.parentNode;
                if (ctrl.getAttribute('type') === 'api') { // fw api register
                    if (event.shiftKey) { // polling
                        init = {};
                        init.detail = {control: ctrl, type: 'api'};
                        document.dispatchEvent(new CustomEvent ('act-polling', init));
                    } else { // plain old read
                        section = parseInt(ctrl.getAttribute('section'));
                        command = parseInt(ctrl.getAttribute('command'));
                        ajax.fwGet(section, command).catch(handler.ERROR);
                        that.classList.add('reloading');
                    }
                }
            } else if (that.classList.contains('data-bit')) { // set bit value via clicking on check box
                ctrl = that.parentNode;
                if (ctrl.getAttribute('type') === 'api') { // fw api register
                    section = parseInt(ctrl.getAttribute('section'));
                    command = parseInt(ctrl.getAttribute('command'));
                    value = that.checked ? 1 : 0;
                    ajax.fwSet(section, command, value).catch(handler.ERROR);
                    ctrl.querySelector('.reload-button').classList.add('reloading');
                }
            }
        });

        document.addEventListener('change', function (event) {
            var that = event.target;
            if (that.classList.contains('radio-button')) {
                var ctrl = that.parentNode.parentNode.parentNode.parentNode;
                if (ctrl.getAttribute('type') === 'api') {
                    var section = parseInt(ctrl.getAttribute('section'));
                    var command = parseInt(ctrl.getAttribute('command'));
                    var value = parseInt(that.value);
                    if (!isNaN(section) && !isNaN(command) && !isNaN(value)) {
                        ajax.fwSet(section, command, value).catch(handler.ERROR);
                        ctrl.querySelector('.reload-button').classList.add('reloading');
                    }
                }
            }
        });

        document.addEventListener('input', function (event) {
            var that = event.target;
            var section, command, value;
            var ctrl = that.parentNode;
            if (that.classList.contains('data-range') && ctrl && ctrl.getAttribute('type') === 'api') {
                section = parseInt(ctrl.getAttribute('section'));
                command = parseInt(ctrl.getAttribute('command'));
                value = parseInt(that.value);
                if (!isNaN(value)) {
                    ajax.fwSet(section, command, value).catch(handler.ERROR);
                    ctrl.querySelector('.reload-button').classList.add('reloading');
                }
            }
        });

        document.addEventListener('keypress', function (event) {
            var that = event.target;
            var key = event.keyCode || event.which;
            if (that.classList.contains('val-text')) {
                var ctrl = that.parentNode;
                if (ctrl.getAttribute('type') === 'api') {
                    if (key === 13) { // Enter
                        leaveCell(that, ctrl);
                    }
                }
            }
        });

        document.addEventListener('blur', function (event) { // focus leaves value text
            var that = event.target;
            if (!('classList' in that)) {
                return;
            }
            if (that.classList.contains('val-text')) {
                var ctrl = that.parentNode;
                if (ctrl.getAttribute('type') === 'api') {
                    leaveCell(that, ctrl);
                }
            }
        }, true);

        document.addEventListener('act-reload-visible', function () {
            if (handy.isApiTabSelected()) {
                var sections = $.$('section.section:not(.hidden)[type=api]');
                Array.prototype.slice.call(sections).forEach(function (section) {
                    var controls = section.querySelectorAll('article.control-item:not(.hidden)');
                    Array.prototype.slice.call(controls).forEach(function (ctrl) {
                        var section = parseInt(ctrl.getAttribute('section'));
                        var command = parseInt(ctrl.getAttribute('command'));
                        ajax.fwGet(section, command).catch(handler.ERROR);
                        ctrl.querySelector('.reload-button').classList.add('reloading');
                    });
                });
            }
        });

        document.addEventListener('act-fw-drop', dropFW);

        document.addEventListener('act-fw-api-loaded', function () { // check for firmware revision if available
            var api = state.api.get();
            if ('selfcheck' in api && 'FIRMWARE_ID' in api.selfcheck && 'value' in api.selfcheck['FIRMWARE_ID']) { // by this time fw api loaded should be valid
                if ('FW_REVISION' in api.sections['TSELFTEST'].commands) {
                    var firmwareId = parseInt(api.selfcheck['FIRMWARE_ID'].value);
                    var sec = api.sections['TSELFTEST'];
                    var cmd = sec.commands['FW_REVISION'];
                    if ('value' in sec && 'value' in cmd) {
                        ajax.fwGet(sec.value, cmd.value, true)
                        .then(function (rev) {
                            if (firmwareId === rev) {
                                handler.OK();
                            } else {
                                handler.ERROR('FW API revision is wrong');
                            }
                        })
                        .catch(function (error) {
                            handler.ERROR('Unable to check FW API revision: ' + error);
                        });
                    } else {
                        handler.ERROR('Unable to check FW API revision');
                    }
                }
            } else {
                handler.ERROR('Unable to check FW API revision');
            }
        });

        return tryLoadApi();

    }

};

},{"../common/handler":3,"../utils/ajax":32,"../utils/handy":35,"../utils/helper":36,"../utils/state":39}],13:[function(require,module,exports){
var handler = require('../common/handler');

var $ = require('../utils/helper');
var state = require('../utils/state');
var handy = require('../utils/handy');
var ajax = require('../utils/ajax');
var file = require('../utils/file');

/**
 * @private
 */
function __upload_file (event) {

    var that = event.target;
    var f = that.files[0];
    if (f.size > 0) {
        var ctrl = that.parentNode;
        var section = parseInt(ctrl.getAttribute('section'));
        var command = parseInt(ctrl.getAttribute('command'));
        var reader = new FileReader();
        reader.onload = (function (unused) {
            return function (event) {
                ajax.fileUpload(section, command, event.target.result)
                .then(function () {
                    that.value = '';
                })
                .catch(handler.ERROR);
            }
        })(f);
        reader.readAsArrayBuffer(f);
    } else {
        handler.ERROR('Empty file');
        that.value = '';
        $('#progress').classList.add('hidden');
    }

}

/**
 * @param {String} name
 * @private
 */
function selectMenuItem(name) {
    var sec = $('.section[section="' + name + '"][type=file]');
    var item = $('.section-link[section="' + name + '"][type=file]');
    if (sec && item) {
        handy.hideSections();
        handy.clearMenuItemSelection();
        state.file.setSelectedSectionName(name);
        state.navigation.addStep('file', name);
        item.classList.add('selected-item');
        sec.classList.remove('hidden');
        sec.querySelector('.control-item').classList.remove('hidden');
        sec.querySelector('.page-sub-menu').classList.remove('hidden');
        document.dispatchEvent(new Event('act-reload-visible'));
        $('.content').scrollTop = 0;
    }
}

var isFileTabSelected = function () {
    return $('div.file-controls.hidden') === null;
};

function dropFW () {
    var sd = $('.file-controls');
    sd.innerHTML = '';
    sd.classList.add('hidden');
    $('.tab-label[for="file-tab"]').classList.add('hidden');
    $('.file-menu').innerHTML = '';
}

/**
 * @param {Object} transfers
 * @private
 */
function buildMenu(transfers) {
    var menu = $('.file-menu');
    var template = $('#api-menu-item-template').content;
    var item = template.querySelector('.section-link');
    for (var name in transfers) if (transfers.hasOwnProperty(name)) {
        item.setAttribute('type', 'file');
        item.setAttribute('search', name.toLowerCase().replace(/_/g, ' '));
        item.setAttribute('section', name);
        item.setAttribute('title', name);
        item.innerHTML = name;
        menu.appendChild(item.cloneNode(true));
    }
}

/**
 * @param {Object} owner
 * @param {Object} transfer
 * @param {String} name
 * @param {Number} section
 * @private
 */
function buildControl (owner, transfer, name, section) {
    var template = $('#file-transfer-ctrl-template').content;
    var art = template.querySelector('.control-item');
    var star = art.querySelector('.star-button');
    var value = parseInt(transfer.value);

    art.setAttribute('display-text', name);
    art.setAttribute('section', section.toString());
    art.setAttribute('command', value.toString());
    art.setAttribute('search', name.toLowerCase().replace(/_/g, ' '));
    star.setAttribute('fav-name', name);
    var clone = art.cloneNode(true);

    var label = clone.querySelector('.cmd-label');
    label.innerHTML = name;
    if ('tooltip' in transfer) {
        label.setAttribute('tooltip', transfer.tooltip);
    } else {
        label.setAttribute('title', name);
    }

    var loader = clone.querySelector('.file-transfer-loader');
    loader.addEventListener('change', __upload_file);

    owner.appendChild(clone);
}

/**
 * @param {Object} transfers
 * @param {Number} section
 * @private
 */
function buildSections(transfers, section) {
    var container = $('.file-controls');
    var template = $('#api-section-template').content;
    var sec = template.querySelector('.section');
    var header = sec.querySelector('h3');
    var clone;
    for (var name in transfers) if (transfers.hasOwnProperty(name)) {
        header.innerHTML = name;
        sec.setAttribute('section', name);
        sec.setAttribute('type', 'file');
        clone = container.appendChild(sec.cloneNode(true));
        buildControl(clone, transfers[name], name, section);
    }
}

module.exports = {

    loaded: function () {

        document.addEventListener('act-select-last-menu-item', function () {
            var first;
            if (isFileTabSelected()) {
                if (state.file.hasSelectedSection()) {
                    selectMenuItem(state.file.getSelectedSectionName());
                } else {
                    first = $('.section-link[type=file]');
                    if (first) {
                        selectMenuItem(first.getAttribute('section'));
                    }
                }
            }
        });

        document.addEventListener('act-fw-api-loaded', function () {

            var api = state.api.get();

            if ('file_transfer' in api && 'value' in api['file_transfer'] && 'types' in api['file_transfer']) { // we have file transfer
                var transfers = api['file_transfer'].types;
                var section = parseInt(api['file_transfer'].value);
                buildMenu(transfers);
                buildSections(transfers, section);
                $('.tab-label[for="file-tab"]').classList.remove('hidden');
                if (isFileTabSelected()) {
                    document.dispatchEvent(new Event('act-select-last-menu-item'));
                }
            }

        });

        document.addEventListener('act-fw-drop', dropFW);

        document.addEventListener('act-restore-menu', function () {
            if (isFileTabSelected()) {
                var menu = $('.file-menu');
                menu.classList.remove('hidden');
                Array.prototype.slice.call(menu.querySelectorAll('.section-link')).forEach(function (node) {
                    node.classList.remove('hidden');
                });
                var fmenu = $('.file-fav-menu');
                fmenu.classList.remove('hidden');
                Array.prototype.slice.call(fmenu.querySelectorAll('.section-link')).forEach(function (node) {
                    node.classList.remove('hidden');
                });
            }
        });

        document.addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            var that = event.target, ctrl;
            if (that.classList.contains('section-link')) {
                var name = that.getAttribute('section');
                selectMenuItem(name);
            } else if (that.classList.contains('upload-file-button')) {
                ctrl = that.parentNode;
                var loader = ctrl.querySelector('.file-transfer-loader');
                loader.click();
            } else if (that.classList.contains('download-file-button')) {
                ctrl = that.parentNode;
                if (ctrl.getAttribute('type') === 'file') {
                    var section = parseInt(ctrl.getAttribute('section'));
                    var command = parseInt(ctrl.getAttribute('command'));
                    if (isNaN(section) || isNaN(command)) {
                        return;
                    }
                    ajax.fileDownload(section, command)
                    .then(function (bytes) {
                        var buffer = new Uint8Array(bytes.length);
                        bytes.forEach(function (byte, i) {
                            buffer[i] = bytes[i];
                        });
                        file.save(ctrl.getAttribute('display-text').toLowerCase() + '.bin', 'application/octet-stream', buffer);
                    })
                    .catch(handler.ERROR);
                }
            }
        });

    }

};

},{"../common/handler":3,"../utils/ajax":32,"../utils/file":34,"../utils/handy":35,"../utils/helper":36,"../utils/state":39}],14:[function(require,module,exports){
var $ = require('../utils/helper');

var uint = require('./types/uint');
var bit = require('./types/bit');
var enm = require('./types/enum');

module.exports = {

    /**
     * @param {Object} ctrl
     * @param {Number} value
     */
    display: function (ctrl, value) {
        var type = ctrl.getAttribute('data-type');
        switch (type) {
            case 'uint':
                uint.display(ctrl, value);
                break;
            case 'bit':
                bit.display(ctrl, value);
                break;
            case 'enum':
                enm.display(ctrl, value);
                break;
            default: break;
        }
        setTimeout(function () { ctrl.querySelector('.reload-button').classList.remove('reloading'); }, 100);
    }

};

},{"../utils/helper":36,"./types/bit":15,"./types/enum":16,"./types/uint":17}],15:[function(require,module,exports){
var handler = require('../../common/handler');

module.exports = {

    /**
     * @param {Object} ctrl
     * @param {Number} value
     */
    display: function (ctrl, value) {
        var val = parseInt(value);
        if ( val < 0 || val > 1 ) {
            handler.ERROR('Value ' + val + ' is not within range [0, 1] specified for ' + ctrl.getAttribute('display-text'));
            return;
        }
        ctrl.querySelector('input.data-bit').checked = (val !== 0);
        handler.OK();
    }
};

},{"../../common/handler":3}],16:[function(require,module,exports){
var handler = require('../../common/handler');

module.exports = {

    /**
     * @param {Object} ctrl
     * @param {Number} value
     */
    display: function (ctrl, value) {
        var val = parseInt(value);
        var holder = ctrl.querySelector('.enum-holder');
        var options = holder.querySelectorAll('input[type=radio]');
        var available = [];
        for (var k = 0, len = options.length, option; k < len; k++) {
            option = options[k];
            var v = parseInt(option.getAttribute('value'));
            available.push(v);
            if (v === val) {
                option.checked = true;
                handler.OK();
                return;
            }
        }
        handler.ERROR('Value ' + val + ' is not within enum ' + JSON.stringify(available) + ' specified for ' + ctrl.getAttribute('display-text'));
    }

};

},{"../../common/handler":3}],17:[function(require,module,exports){
var handler = require('../../common/handler');

module.exports = {

    /**
     * @param {Object} ctrl
     * @param {Number} value
     */
    display: function (ctrl, value) {
        var val = parseInt(value);
        var range = ctrl.querySelector('input.data-range');
        var min = range.getAttribute('min');
        var max = range.getAttribute('max');
        if ( val < min || max < val ) {
            handler.ERROR('Value ' + val + ' is not within range [' + min + ', ' + max + '] specified for ' + ctrl.getAttribute('display-text'));
            return;
        }
        range.value = val;
        var txt = ctrl.querySelector('input.val-text');
        if (txt.classList.contains('hex')) {
            txt.value = val.toString(16);
        } else {
            txt.value = val.toString(10);
        }

        handler.OK();
    }

};

},{"../../common/handler":3}],18:[function(require,module,exports){
var $ = require('../utils/helper');
var state = require('../utils/state');
var handy = require('../utils/handy');

/**
 * @param {String} name
 */
function selectMenuItem(name) {
    var item = $('.section-link[section="' + name + '"][type=hw]');
    var section = $('.section[section="' + name + '"]');
    if (item && section) {
        handy.clearMenuItemSelection();
        handy.hideSections();
        state.hw.setSelectedSectionName(name);
        state.navigation.addStep('hw', name);
        item.classList.add('selected-item'); // mark menu item as selected
        section.classList.remove('hidden'); // show corresponding section
        var registers = section.querySelectorAll('.control-item.hidden[type=hw]');
        if (registers) { // show hidden registers on this section if any
            Array.prototype.slice.call(registers).forEach(function (reg) {
                reg.classList.remove('hidden');
            });
        }
        section.querySelector('.page-sub-menu').classList.remove('hidden');
        document.dispatchEvent(new Event('act-reload-visible'));
        $('.content').scrollTop = 0;
    }
}

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function () {

        document.addEventListener('act-select-section', function (event) {
            if (handy.isHardwareTabSelected()) {
                var data = event.detail;
                var name = data.name;
                selectMenuItem(name);
            }
        });

        document.addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            var that = event.target;
            if (that.classList.contains('section-link') && that.getAttribute('type') === 'hw') { // clicked on menu item in left menu
                selectMenuItem(that.getAttribute('section'));
            }
        });

        document.addEventListener('act-restore-menu', function () {
            if (handy.isHardwareTabSelected()) {
                var menu = $('.hw-menu');
                menu.classList.remove('hidden');
                Array.prototype.slice.call(menu.querySelectorAll('.section-link')).forEach(function (node) {
                    node.classList.remove('hidden');
                });
                var fmenu = $('.hw-fav-menu');
                fmenu.classList.remove('hidden');
                Array.prototype.slice.call(fmenu.querySelectorAll('.section-link')).forEach(function (node) {
                    node.classList.remove('hidden');
                });
            }
        });

        document.addEventListener('act-select-last-menu-item', function () {
            if (handy.isHardwareTabSelected()) {
                if (state.hw.hasSelectedSection()) {
                    selectMenuItem(state.hw.getSelectedSectionName());
                } else {
                    var first = $('.section-link[type=hw]');
                    if (first) {
                        selectMenuItem(first.getAttribute('section'));
                    }
                }
            }
        });

        return Promise.resolve();

    }

};

},{"../utils/handy":35,"../utils/helper":36,"../utils/state":39}],19:[function(require,module,exports){
var $ = require('../utils/helper');
var _ = require('../utils/promise');
var ajax = require('../utils/ajax');
var calc = require('../utils/calc');
var handy = require('../utils/handy');
var file = require('../utils/file');

var types = require('../hw/types');

var handler = require('../common/handler');

var HW_REG_ADDR_REGEX_ALL = /^\(([a-f\d]+)=([a-f\d]+)\)([a-f\d]+)\.([0-7]):([0-7])$/i;
var HW_REG_ADDR_REGEX_BIT = /^\(([a-f\d]+)=([a-f\d]+)\)([a-f\d]+)\.([0-7])$/i;
var HW_REG_ADDR_REGEX_LUT = /^\(([a-f\d]+)=([a-f\d]+)\)([a-f\d]+)$/i;

var workify = require('webworkify');
var rhr = require('../workers/rhr');

/**
 * @param {String} command
 * @param {Object} [reg]
 * @private
 */
function __get_read_params (command, reg) {
    var ctrl = reg || $('article.control-item[command="' + command + '"][type=hw]');
    if (ctrl) {
        return {
            type: ctrl.getAttribute('reg-type'),
            offset: parseInt(ctrl.getAttribute('offset')),
            size: parseInt(ctrl.getAttribute('sz'))
        };
    }
    return null;
}

/**
 * @param {Object} reg
 * @private
 */
function __get_write_params (reg) {
    return {
        command: reg.getAttribute('command'),
        type: reg.getAttribute('reg-type'),
        offset: parseInt(reg.getAttribute('offset')),
        mask: parseInt(reg.getAttribute('mask'))
    };
}

/**
 * @param {String} command
 * @private
 */
function readRegister(command) {
    var params = __get_read_params(command);
    if (params) {
        ajax.hwRead(command, params.type, params.offset, params.size).catch(handler.ERROR);
    }
}

/**
 * @param {String} command
 * @param {Array} value
 * @return {Promise}
 * @private
 */
function writeRegister(command, value) {
    if (command && Array.isArray(value)) {
        var ctrl = $('article.control-item[command="' + command + '"][type=hw]');
        if (ctrl) {
            var type = ctrl.getAttribute('reg-type');
            var offset = parseInt(ctrl.getAttribute('offset'));
            if (type === 'a' || type === 'l') { // if it is array or lut
                return ajax.hwWrite(command, type, offset, value).catch(handler.ERROR);
            } else {
                var mask = ctrl.getAttribute('mask').split(',').map(toInt);
                return ajax.hwWrite(command, type, offset, value, mask).catch(handler.ERROR);
            }
        }
    }
    return Promise.resolve();
}

/**
 * @param {String} address
 * @return {Object}
 */
function decodeRegisterAddress (address) {

    var reg = {};
    var matches = address.match(HW_REG_ADDR_REGEX_ALL);
    if (matches) { // byte or array
        reg.start = parseInt(matches[5]);
        reg.stop = parseInt(matches[4]);
        reg.bits = reg.stop - reg.start + 1; // size of register in bits
    } else {
        matches = address.match(HW_REG_ADDR_REGEX_BIT);
        if (matches) { // bit
            reg.stop = parseInt(matches[4]);
        } else {
            matches = address.match(HW_REG_ADDR_REGEX_LUT);
            if (matches) { /* lut */ } else {
                handler.ERROR('Invalid register address format: ' + address);
                return null;
            }
        }
    }
    var xa = parseInt(matches[1], 16);
    var xb = parseInt(matches[2], 16);
    var xc = parseInt(matches[3], 16);
    reg.offset = ((xa & 0x7f) << 15) + (xb << 7) + (xc & 0x7f);
    return reg;

}

function combineBytes() {

    var multi = $.$('article.control-item[multi][type=hw]');
    var names = new Set();
    Array.prototype.slice.call(multi).forEach(function (ctrl) {
        names.add(ctrl.getAttribute('multi'))
    });
    names.forEach(function (name) {
        var controls = $.$('article.control-item[multi="' + name + '"][type=hw]');
        var sz = controls.length;
        if (sz < 1) {
            handler.ERROR('Bad multi-byte ' + name);
            return;
        }
        var bits = 0;
        var ofs = [];
        var they = {};
        for (var b = 0, ctrl, offset; b < sz; b++) {
            ctrl = controls[b];
            offset = ctrl.getAttribute('offset');
            ofs.push(parseInt(offset));
            they[offset] = ctrl;
            bits += parseInt(ctrl.getAttribute('bits'));
        }
        var keys = ofs.sort(function (a, b) {
            return a - b;
        });
        var mask = '', low = '', high = '';
        for (b = 0; b < sz; b++) {
            if (b > 0) {
                mask +=',';
                low +=',';
                high +=',';
            }
            ctrl = they[keys[b]];
            mask += ctrl.getAttribute('mask');
            low += ctrl.getAttribute('low');
            high += ctrl.getAttribute('high');
            if (b > 0) {
                ctrl.parentNode.removeChild(ctrl);
                delete they[keys[b]];
            }
        }
        var max = Math.pow(2, bits) - 1;
        var one = they[keys[0]];
        one.setAttribute('command', name);
        one.setAttribute('sz', sz);
        one.setAttribute('bits', bits.toString());
        one.setAttribute('mask', mask);
        one.setAttribute('low', low);
        one.setAttribute('high', high);
        one.setAttribute('max', max.toString());
        one.querySelector('.data-range').setAttribute('max', max.toString());
        one.querySelector('.bit-hint').innerHTML = bits.toString();
        var id = name.replace(/[_\s\/]/g, '-').toLowerCase();
        one.querySelector('.val-text').setAttribute('id', id);
        var cl = one.querySelector('.cmd-label');
        cl.querySelector('.byte-hint').innerHTML = bits + ' bits of ' + sz + ' bytes';
        var show = cl.querySelector('.cmd-show');
        show.innerHTML = name.split('/').pop();
        show.setAttribute('for', id);
    });
}

function splitBytes() {

    var multi = $.$('article.control-item[multi][type=hw]');
    var names = new Set();
    Array.prototype.slice.call(multi).forEach(function (ctrl) {
        var name = ctrl.getAttribute('multi');
        names.add(name)
    });
    names.forEach(function (name) {
        var one = $('article.control-item[multi="' + name + '"][type=hw]');
        var mask = one.getAttribute('mask').split(',').map(toInt);
        var low = one.getAttribute('low').split(',').map(toInt);
        var high = one.getAttribute('high').split(',').map(toInt);
        var offset = parseInt(one.getAttribute('offset'));
        var sz = mask.length;
        var longName, regName, clone, cl, range, hint;
        for (var b = 0, m, l, h, of, bits; b < sz; b++) {
            m = mask[b];
            l = low[b];
            h = high[b];
            of = b * 8;
            bits = h - l + 1;
            longName = name + ' (' + (h + of ) + ':' + ( l + of ) + ')';
            regName = longName.split('/').pop();
            clone = one.cloneNode(true);
            clone.setAttribute('command', longName);
            clone.setAttribute('mask', m.toString());
            clone.setAttribute('offset', (offset + b).toString());
            clone.setAttribute('sz', '1');
            clone.setAttribute('low', l.toString());
            clone.setAttribute('high', h.toString());
            clone.setAttribute('bits', bits.toString());
            clone.setAttribute('max', ((1 << bits) - 1).toString());
            cl = clone.querySelector('.cmd-label');
            cl.querySelector('.byte-hint').innerHTML = '';
            var id = longName.replace(/[_\s\/\(\):]/g, '-').toLowerCase();
            var show = cl.querySelector('.cmd-show');
            show.innerHTML = regName;
            show.setAttribute('for', id);
            range = clone.querySelector('.data-range');
            range.setAttribute('max', m.toString());
            clone.querySelector('.bit-hint').innerHTML = bits.toString();
            clone.querySelector('.val-text').setAttribute('id', id);
            one.parentNode.insertBefore(clone, one);
        }
        one.parentNode.removeChild(one);
    });

}

var HW_REG_NAME_REGEX = /(.*) \(\d+:\d+\)$/;

function scanRegister(ctrl) {

    var reg = decodeRegisterAddress(ctrl.getAttribute('data-address'));

    if (reg) {
        ctrl.setAttribute('offset', reg.offset);
    } else {
        ctrl.classList.add('bad-register');
        return;
    }
    ctrl.removeAttribute('data-address');

    if (ctrl.getAttribute('data-mode') === 'WO') {
        ctrl.classList.add('bad-register');
        return;
    }

    var dataType = ctrl.getAttribute('data-type');
    var command = ctrl.getAttribute('command');

    var star = ctrl.querySelector('i.star-button');
    if (star) {
        star.setAttribute('fav-name', command.toLowerCase());
    }
    ctrl.setAttribute('search', command.split('/').pop().toLowerCase());

    switch(dataType) {
        case 'bit':
            ctrl.setAttribute('reg-type', 'r');
            ctrl.setAttribute('mask', (1 << reg.stop).toString());
            break;
        case 'byte':
            ctrl.setAttribute('reg-type', 'r');
            ctrl.setAttribute('low', reg.start);
            ctrl.setAttribute('high', reg.stop);
            ctrl.setAttribute('mask', ((1 << (reg.stop + 1)) - (1 << reg.start)).toString());
            break;
        case 'array':
            ctrl.setAttribute('reg-type', 'a');
            break;
        case 'lut':
            ctrl.setAttribute('reg-type', 'l');
            break;
        default:
            handler.ERROR('Unknown data type ' + dataType + ' for register ' + command);
            ctrl.classList.add('bad-register');
            return;
    }

    if (dataType === 'bit') {

        ctrl.setAttribute('sz', '1');

    } else  if (dataType === 'byte') {

        ctrl.setAttribute('bits', reg.bits);
        ctrl.setAttribute('sz', '1'); // byte size of register (it is 1 when bytes are not combined)
        ctrl.setAttribute('max', ( (1 << parseInt(reg.bits)) - 1 ).toString());

        var matches = command.match(HW_REG_NAME_REGEX);
        if (matches && matches.length === 2) { // get base command name for multi-byte registers
            var multi = matches[1];
            ctrl.setAttribute('multi', multi);
            var nice = multi.toLowerCase();
            if (star) { // fix search and fav-name for multi-byte registers
                star.setAttribute('fav-name', nice);
            }
            ctrl.setAttribute('search', nice.split('/').pop());
        }

    } else if (dataType === 'array' || dataType === 'lut') {

        var bits        = ctrl.hasAttribute('table-bits') ? ctrl.getAttribute('table-bits') : '8';
        var align       = ctrl.hasAttribute('table-align') ? ctrl.getAttribute('table-align').substring(2) : '8';
        var nodes       = ctrl.hasAttribute('data-nodes') ? ctrl.getAttribute('data-nodes') : '1';
        var arrangement = ctrl.hasAttribute('arrangement') ? ctrl.getAttribute('arrangement') : '1x' + nodes;
        var size = parseInt(Math.floor((parseInt(align) * parseInt(nodes)) / 8)); // byte size of register
        ctrl.setAttribute('bits', bits);
        ctrl.setAttribute('align', align);
        ctrl.setAttribute('nodes', nodes);
        ctrl.setAttribute('sz', size.toString());
        ctrl.setAttribute('max', (Math.pow(2, parseInt(bits)) - 1).toString());
        ctrl.setAttribute('arrangement', arrangement);

    }

    ctrl.removeAttribute('table-align');
    ctrl.removeAttribute('table-bits');
    ctrl.removeAttribute('data-nodes');

}

function adjust(ctrl) {
    var type = ctrl.getAttribute('data-type');
    if (type === 'byte') {
        var range = ctrl.querySelector('input.data-range[type=range]');
        var max = ctrl.getAttribute('max');
        if (range) {
            range.setAttribute('max', max);
        }
        var hint = ctrl.querySelector('p.bit-hint');
        if (hint) {
            hint.innerHTML = ctrl.getAttribute('bits');
        }
    } else  if (type === 'array' || type === 'lut') {
        ctrl.querySelector('p.bit-hint').innerHTML = ctrl.getAttribute('bits');
    }
}

function cleanBadRegisters(section) {
    [].forEach.call(section.querySelectorAll('article.bad-register'), function (ctrl) {
        ctrl.parentNode.removeChild(ctrl);
    });
}

function scanRegisters(section) { // mut be run before byte combining
    var controls = section.querySelectorAll('article.control-item[type=hw]');
    Array.prototype.slice.call(controls).forEach(function (control) {
        scanRegister(control);
        adjust(control);
    });
    cleanBadRegisters(section);
}

function toInt(m) {
    return parseInt(m);
}

/**
 * @param {Number} value
 * @param {Array} masks
 * @param {Number} sz
 * @return {Array}
 */
function valueToBytes(value, masks, sz) {
    var x = parseInt(value);
    if (isNaN(x) || masks.length !== sz) {
        return Array.apply(null, new Array(sz)).map(Number.prototype.valueOf,0);
    }
    var bytes = [];
    for (var b = 0, mask, byte, w; b < sz; b++) {
        mask = masks[b];
        w = b * 8;
        byte = (x & ( Math.pow(2, (w + 8)) - 1)) >>> w;
        bytes.push( byte & mask );
    }
    return bytes;
}

function sendBytesFromControl(that, reg) {
    var cmd = reg.getAttribute('command');
    var sz = parseInt(reg.getAttribute('sz'));
    var numVal = parseInt(that.value, that.classList.contains('hex') ? 16 : 10);
    var mask;
    if (sz === 1) { // one byte
        var low = parseInt(reg.getAttribute('low'));
        mask = parseInt(reg.getAttribute('mask'));
        if (low > 0) { // incomplete byte which uses bits in the middle of the byte
            numVal = numVal << low;
        }
        writeRegister(cmd, [numVal & mask]);
    } else { // multi-byte
        mask = reg.getAttribute('mask').split(',').map(toInt);
        writeRegister(cmd, valueToBytes(numVal, mask, sz));
    }
    reg.querySelector('.reload-button').classList.add('reloading');
}

/**
 * @param {String} command
 * @param {Array} value
 * @param {Function} handler
 * @return {undefined|Number|Boolean|Array}
 * @private
 */
function __process_result (command, value, handler) {
    var ctrl = $('article.control-item[command="' + command + '"][type=hw]');
    if (ctrl) {
        var offset = parseInt(ctrl.getAttribute('offset'));
        var type = ctrl.getAttribute('data-type');
        if (type === 'byte' || type === 'bit') {
            var mask = ctrl.getAttribute('mask').split(',').map(toInt);
            return handler(ctrl, type, value, mask);
        } else if (type === 'array' || type === 'lut' ){
            var bits = parseInt(ctrl.getAttribute('bits'));
            var align = parseInt(ctrl.getAttribute('align'));
            return handler(ctrl, type, value, null, bits, align);
        }
    }
}

/**
 * @param {Array} commands
 * @private
 */
function saveRegisters(commands) {

    var init;
    init = {detail: 'Please wait while operation completes'};
    document.dispatchEvent(new CustomEvent('act-popup-progress', init));

    var mcuPriorityRegisters = Array.prototype.slice.call($.$('.control-item[type=hw][command$="/MCU priority"]'));
    var origVals = mcuPriorityRegisters.map(function (reg) { // save original values of MCU priority registers
        return reg.querySelector('.data-bit').checked;
    });
    var promises =  mcuPriorityRegisters.map(function (reg) {
        var params = __get_write_params(reg);
        return ajax.hwWrite(params.command, params.type, params.offset, [0xff], [params.mask]);
    });
    Promise.all(promises) // set MCU priority registers to 1
    .then(function () {
        var defer = _.defer();
        var progress = $('#modal-progress');
        var worker = workify(rhr);
        worker.onmessage = function (event) {
            var data = event.data;
            if (data.error) {
                worker.terminate();
                progress.value = 0;
                defer.reject(data.error);
            } else if (data.done) {
                progress.value = 0;
                defer.resolve(data.results);
            } else {
                if (progress.value < data.progress) {
                    progress.value = data.progress;
                }
            }
        };
        worker.onerror = function (error) {
            defer.reject(error.message);
            progress.value = 0;
        };
        progress.value = 0;
        progress.max = commands.length;
        worker.postMessage({
            base: document.domain + ':' + location.port,
            commands: commands
        }); // reload all hardware registers
        return defer.promise;
    })
    .then(function (results) { // allow user to download data to settings.json file
        var data = results.map(function (result) {
            return {
                name: result.name,
                value: __process_result(result.name, result.bytes, types.comprehend)
            };
        });
        file.save('settings.json', 'application/json', data);
    })
    .catch(handler.ERROR)
    .then(function () { // restore original values of MCU priority registers
        mcuPriorityRegisters.map(function (reg, idx) {
            var params = __get_write_params(reg);
            ajax.hwWrite(params.command, params.type, params.offset, origVals[idx] ? [0xff] : [0x0], [params.mask]);
        });
    })
    .catch(handler.ERROR)
    .then(function () { // finally
        document.dispatchEvent(new Event('act-cover-progress'));
    });

}

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function () {

        var sections = $.$('section.section[type=hw]');
        Array.prototype.slice.call(sections).forEach(function (section) {
            scanRegisters(section);
        });

        document.addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            var that = event.target;
            var cmd, init, reg;
            if (that.classList.contains('reload-button')) {
                reg = that.parentNode;
                if (reg.getAttribute('type') === 'hw') { // hardware registers
                    if (event.shiftKey) { // polling
                        init = {};
                        init.detail = {control: reg, type: 'hw'};
                        document.dispatchEvent(new CustomEvent ('act-polling', init));
                    } else { // plain old read
                        cmd = reg.getAttribute('command');
                        readRegister(cmd);
                        that.classList.add('reloading');
                    }
                }
            } else if (that.classList.contains('data-bit')) { // send bit value to server
                reg = that.parentNode;
                if (reg.getAttribute('type') === 'hw') { // hardware registers
                    cmd = reg.getAttribute('command');
                    writeRegister(cmd, that.checked ? [0xff] : [0x0]);
                    reg.querySelector('.reload-button').classList.add('reloading');
                }
            }
        });

        document.addEventListener('input', function (event) {
            var that = event.target;
            var ctrl = that.parentNode;
            if (that.classList.contains('data-range') && ctrl.getAttribute('type') === 'hw') { // byte range value changed
                sendBytesFromControl(that, ctrl);
            }
        });

        document.addEventListener('keypress', function (event) {
            var that = event.target;
            var key = event.keyCode || event.which;
            if (that.classList.contains('val-text')) { // key Enter pressed in value text
                var ctrl = that.parentNode;
                if (ctrl.getAttribute('type') === 'hw') { // hw register
                    if (key === 13) { // Enter
                        sendBytesFromControl(that, ctrl);
                    }
                }
            }
        });

        document.addEventListener('blur', function (event) {
            var that = event.target;
            if (!('classList' in that)) {
                return;
            }
            if (that.classList.contains('val-text')) { // focus leaves value text
                var ctrl = that.parentNode;
                if (ctrl.getAttribute('type') === 'hw') { // hw register
                    sendBytesFromControl(that, ctrl);
                }
            }
        }, true);

        document.addEventListener('act-hw-value-changed', function (event) {
            var data = event.detail;
            var command = data.command;
            var value = data.bytes;
            if (command && Array.isArray(value)) {
                __process_result(command, value, types.display);
            }
        });

        document.addEventListener('act-combine-hw-bytes', combineBytes);

        document.addEventListener('act-split-hw-bytes', splitBytes);

        document.addEventListener('act-reload-visible', function () {
            if (handy.isHardwareTabSelected()) {
                var sections = $.$('section.section:not(.hidden)[type=hw]');
                Array.prototype.slice.call(sections).forEach(function (section) {
                    var controls = section.querySelectorAll('article.control-item:not(.hidden)');
                    Array.prototype.slice.call(controls).forEach(function (ctrl) {
                        var cmd = ctrl.getAttribute('command');
                        readRegister(cmd);
                        ctrl.querySelector('.reload-button').classList.add('reloading');
                    });
                });
            }
        });

        document.addEventListener('act-save-visible-hw-registers', function () {
            var controls = [];
            var sections = Array.prototype.slice.call($.$('.section:not(.hidden)[type=hw]'));
            sections.forEach(function (section) {
                Array.prototype.push.apply(controls, Array.prototype.slice.call(section.querySelectorAll('.control-item:not(.hidden)[type=hw]')));
            });
            saveRegisters(controls.map(function (reg) {
                var command = reg.getAttribute('command');
                var params = __get_read_params(command, reg);
                params.name = command;
                return params;
            }));
        });

        document.addEventListener('act-save-hw-registers', function () {
            var commands = Array.prototype.slice.call($.$('.control-item[type=hw]')).map(function (reg) {
                var command = reg.getAttribute('command');
                var params = __get_read_params(command, reg);
                params.name = command;
                return params;
            });
            saveRegisters(commands);
        });

        document.addEventListener('act-load-hw-registers', function (event) {
            var data = event.detail;
            if (Array.isArray(data)) {

                var init;
                init = {detail: 'Please wait while operation completes'};
                document.dispatchEvent(new CustomEvent('act-popup-progress', init));

                var progress = $('#modal-progress');
                progress.value = 0;
                progress.max = data.length;

                var mcuPriorityRegisters = Array.prototype.slice.call($.$('.control-item[type=hw][command$="/MCU priority"]'));
                var origVals = mcuPriorityRegisters.map(function (reg) { // save original values of MCU priority registers
                    return reg.querySelector('.data-bit').checked;
                });
                var promises =  mcuPriorityRegisters.map(function (reg) {
                    var params = __get_write_params(reg);
                    return ajax.hwWrite(params.command, params.type, params.offset, [0xff], [params.mask]);
                });
                Promise.all(promises)
                .then(function () {
                    var promises = data.map(function (item, idx) {
                        return Promise.resolve()
                        .then(function () {
                            var cmd = item.name;
                            if (cmd.includes('/MCU priority')) { // skip setting MCU priority
                                return Promise.resolve();
                            }
                            var ctrl = $('.control-item[command="' + cmd + '"][type=hw]');
                            if (ctrl && (ctrl.getAttribute('data-mode') !== 'RO')) {
                                var type = ctrl.getAttribute('data-type');
                                switch (type) {
                                    case 'bit':
                                        return writeRegister(cmd, item.value ? [0xff] : [0x0]);
                                    case 'byte':
                                        var sz = parseInt(ctrl.getAttribute('sz'));
                                        if (sz === 1) {
                                            return writeRegister(cmd, [item.value]);
                                        } else { // multi-byte
                                            var mask = ctrl.getAttribute('mask').split(',').map(toInt);
                                            return writeRegister(cmd, valueToBytes(item.value, mask, sz));
                                        }
                                    case 'array': case 'lut':
                                    var bits = parseInt(ctrl.getAttribute('bits'));
                                    var align = parseInt(ctrl.getAttribute('align'));
                                    var rt = ctrl.getAttribute('reg-type');
                                    var offset = parseInt(ctrl.getAttribute('offset'));
                                    return ajax.hwWrite(cmd, rt, offset, calc.arrayToBytes(item.value, bits, align)).catch(handler.ERROR);
                                    default:
                                        return Promise.resolve();
                                }
                            }
                            return Promise.resolve();
                        })
                        .then(function() {
                            if (progress.value < idx) {
                                progress.value = idx;
                            }
                        });
                    });
                    return Promise.all(promises);
                })
                .catch(handler.ERROR)
                .then(function () { // restore original values of MCU priority registers
                    mcuPriorityRegisters.map(function (reg, idx) {
                        var params = __get_write_params(reg);
                        ajax.hwWrite(params.command, params.type, params.offset, origVals[idx] ? [0xff] : [0x0], [params.mask]);
                    });
                })
                .catch(handler.ERROR)
                .then(function () { // finally
                    document.dispatchEvent(new Event('act-cover-progress'));
                });

            }
        });

        if ($('#combine-multi-bytes').checked) {
            combineBytes();
        }

        return Promise.resolve();

    }

};

},{"../common/handler":3,"../hw/types":20,"../utils/ajax":32,"../utils/calc":33,"../utils/file":34,"../utils/handy":35,"../utils/helper":36,"../utils/promise":38,"../workers/rhr":40,"webworkify":1}],20:[function(require,module,exports){
var $ = require('../utils/helper');

var bit = require('./types/bit');
var byte = require('./types/byte');
var array = require('./types/array');

module.exports = {

    /**
     * @param {Object} ctrl
     * @param {String} type
     * @param {Array} value
     * @param {Array|null} mask
     * @param {Number} [bits]
     * @param {Number} [align]
     */
    display: function (ctrl, type, value, mask, bits, align) {
        switch (type) {
            case 'bit':
                bit.display(ctrl, value, mask);
                break;
            case 'byte':
                byte.display(ctrl, value, mask);
                break;
            case 'array': case 'lut':
                array.display(ctrl, value, bits, align);
                break;
            default: break;
        }
        setTimeout(function () { ctrl.querySelector('.reload-button').classList.remove('reloading'); }, 100);
    },

    /**
     * @param {Object} unused
     * @param {String} type
     * @param {Array} value
     * @param {Array|null} mask
     * @param {Number} [bits]
     * @param {Number} [align]
     * @return {undefined|Number|Boolean|Array}
     */
    comprehend: function (unused, type, value, mask, bits, align) {
        switch (type) {
            case 'bit':
                return bit.comprehend(value, mask);
            case 'byte':
                return byte.comprehend(value, mask);
            case 'array': case 'lut':
                return array.comprehend(value, bits, align);
            default: return undefined;
        }
    }

};

},{"../utils/helper":36,"./types/array":21,"./types/bit":22,"./types/byte":23}],21:[function(require,module,exports){
var $ = require('../../utils/helper');
var calc = require('../../utils/calc');
var handler = require('../../common/handler');

/**
 * @param {Number} bits
 * @param {Number} align
 * @return {Boolean}
 * @private
 */
function __bad_params (bits, align) {
    if ((align % 8) !== 0 || align < 0) {
        return true;
    }
    return !!(bits > align || bits < 0);
}

module.exports = {

    /**
     * @param {Object} ctrl
     * @param {Array} bytes
     * @param {Number} bits
     * @param {Number} align
     */
    display: function (ctrl, bytes, bits, align) {
        if (__bad_params(bits, align)) {
            handler.ERROR('Bad array bits or align for ' + ctrl.getAttribute('display-text'));
            return;
        }
        var table = ctrl.querySelector('.array-table');
        if (table) {
            var ln = bytes.length;
            var mask = Math.pow(2, bits) - 1;
            var max = mask;
            table.innerHTML = '';
            table.setAttribute('max', max.toString());
            var radix = table.classList.contains('hex') ? 16 : 10;
            var template = $('#array-cell-template').content;
            var cell = template.querySelector('li');
            var sw = (max.toString(radix).length + 1) + 'ex';
            var width = align >>> 3;
            var sz = parseInt(ctrl.getAttribute('sz'));
            for (var b = 0, idx = 0, x; b < ln && idx < sz; b += width) {
                x = calc.bytesToItem2(bytes, mask, align, b);
                cell.innerHTML = x.toString(radix);
                cell.setAttribute('tooltip', idx + '-th element');
                cell.setAttribute('index', idx.toString());
                cell.style.width = sw;
                table.appendChild(cell.cloneNode(true));
                idx++;
            }
            handler.OK();
        }
    },

    /**
     * @param {Array} bytes
     * @param {Number} bits
     * @param {Number} align
     */
    comprehend: function (bytes, bits, align) {
        if (__bad_params(bits, align)) {
            return undefined;
        } else {
            return calc.bytesToArray(bytes, bits, align) || undefined;
        }
    }

};

},{"../../common/handler":3,"../../utils/calc":33,"../../utils/helper":36}],22:[function(require,module,exports){
var handler = require('../../common/handler');

/**
 * @param {Array} bytes
 * @param {Array} mask
 * @return {Boolean}
 * @private
 */
function __convert(bytes, mask) {
    return (bytes[0] & mask[0]) !== 0;
}

module.exports = {

    /**
     * @param {Object} ctrl
     * @param {Array} bytes
     * @param {Array} mask
     */
    display: function (ctrl, bytes, mask) {
        if (bytes.length === 1 && mask.length === 1) {
            var cbox = ctrl.querySelector('input.data-bit');
            if (cbox) {
                cbox.checked = __convert(bytes, mask);
            }
            handler.OK();
        } else {
            handler.ERROR('Size mismatch for ' + ctrl.getAttribute('display-text'));
        }
    },

    /**
     * @param {Array} bytes
     * @param {Array} mask
     * @return {undefined|Boolean}
     */
    comprehend: function (bytes, mask) {
        if (bytes.length === 1 && mask.length === 1) {
            return __convert(bytes, mask);
        } else {
            return undefined;
        }
    }

};

},{"../../common/handler":3}],23:[function(require,module,exports){
var handler = require('../../common/handler');

/**
 * @param {Array} bytes
 * @param {Array} masks
 * @param {Number} sz
 * @return {Number}
 * @private
 */
function __combine_bytes (bytes, masks, sz) {
    var value = 0;
    for (var b = 0, byte, mask, low; b < sz; b++) {
        byte = parseInt(bytes[b]);
        mask = parseInt(masks[b]);
        if (isNaN(byte) || isNaN(mask)) {
            return NaN;
        }
        value += ( ( ( byte & mask ) / (mask & -mask) ) << (8 * b) ); // the denominator is meant to be ( mask & (~(mask << 1)) )
    }
    return value >>> 0;
}

module.exports = {

    /**
     * @param {Object} ctrl
     * @param {Array} bytes
     * @param {Array} mask
     */
    display: function (ctrl, bytes, mask) {
        var sz = bytes.length;
        if (sz === mask.length && sz > 0) {
            var x = __combine_bytes(bytes, mask, sz);
            var range = ctrl.querySelector('input.data-range');
            var txt = ctrl.querySelector('input.val-text');
            if (isNaN(x)) {
                if (range) range.value = 0;
                if (txt) {
                    txt.value = '0';
                }
                handler.ERROR('Bad value for ' + ctrl.getAttribute('display-text'));
                return;
            }
            var max = ctrl.getAttribute('max');
            if (x < 0 || x > max) {
                handler.ERROR('Value ' + x + ' exceeds ' + max + ' for ' + ctrl.getAttribute('display-text'));
            } else {
                if (range) range.value = x;
                if (txt) {
                    if (txt.classList.contains('hex')) {
                        txt.value = x.toString(16);
                    } else {
                        txt.value = x.toString(10);
                    }
                }
            }
        } else {
            handler.ERROR('Size mismatch for ' + ctrl.getAttribute('display-text'));
        }
    },

    /**
     * @param {Array} bytes
     * @param {Array} mask
     */
    comprehend: function (bytes, mask) {
        var sz = bytes.length;
        if (sz === mask.length && sz > 0) {
            var x = __combine_bytes(bytes, mask, sz);
            return isNaN(x) ? undefined : x;
        } else {
            return undefined;
        }
    }

};

},{"../../common/handler":3}],24:[function(require,module,exports){
require('./fixme');
require('./polyfill');

var handy        = require('./utils/handy');
var ajax         = require('./utils/ajax');
var state        = require('./utils/state');

var handler      = require('./common/handler');
var search       = require('./common/search');
var viewer       = require('./common/viewer');
var tabs         = require('./common/tabs');
var poll         = require('./common/polling');
var popup        = require('./common/popup');
var fav          = require('./common/fav');

var splitter     = require('./ui/splitter');
var footer       = require('./ui/footer');
var tooltip      = require('./ui/tooltip');
var settings     = require('./ui/settings');
var options      = require('./ui/options');
var history      = require('./ui/history');

var hwm          = require('./hw/menu');
var regs         = require('./hw/registers');

var calibrations = require('./fw/calibrations');
var transfer     = require('./fw/transfer');
var api          = require('./fw/api');
var commands     = require('./fw/commands');

document.addEventListener('act-init-am', function (event) {

    var defer = event.detail.defer;
    var hwBuffer = document.querySelector('article.control-item[command="cmd queues/Data"][type=hw]');
    var debugBuffer = document.querySelector('article.control-item[command="System/Debug 0"][type=hw]');
    var hwBufOffset = null, hwBufSize = null, debugOffset = null;
    if (hwBuffer) {
        hwBufOffset = parseInt(hwBuffer.getAttribute('offset'));
        hwBufSize = parseInt(hwBuffer.getAttribute('sz'));
    }
    if (debugBuffer) {
        debugOffset = parseInt(debugBuffer.getAttribute('offset'));
    }
    ajax.initAM(debugOffset, hwBufOffset, hwBufSize).then(defer.resolve).catch(defer.reject);

});

/**
 * @return {Promise}
 * @private
 */
function firstUsage () {
    var namespace = state.__get_namespace();
    var mark = namespace + '/used';
    if (localStorage.hasOwnProperty(mark)) {} else { // clear old unsupported settings
        for (var key in localStorage) if (localStorage.hasOwnProperty(key) && key.indexOf('acs/') === 0) {
            delete localStorage[key];
        }
        localStorage[mark] = 'true';
    }
    return Promise.resolve();
}

function loaded() { /** order matters */

    Promise.resolve()
    .then(firstUsage)
    .then(handler.loaded)       // only event listeners
    .then(search.loaded)        // only event listeners
    .then(viewer.loaded)        // only event listeners
    .then(tabs.loaded)          // only event listeners
    .then(poll.loaded)          // only event listeners
    .then(popup.loaded)         // only event listeners
    .then(splitter.loaded)      // only event listeners
    .then(footer.loaded)        // only event listeners
    .then(tooltip.loaded)       // only event listeners
    .then(settings.loaded)      // only event listeners
    .then(options.loaded)       // only event listeners
    .then(history.loaded)       // only event listeners
    .then(hwm.loaded)           // only event listeners
    .then(regs.loaded)          //  + dom processing
    .then(calibrations.loaded)  // only event listeners
    .then(transfer.loaded)      // only event listeners
    .then(api.loaded)           // only event listeners
    .then(commands.loaded)      // + loading command.json
    .then(fav.loaded)           // + loading favs all need to be set up already
    .then(function () {
        handy.returnToTab();
        return ajax.get('/version')
        .then(function (data) {
            document.querySelector('#acs-ver').innerHTML = data.version;
        });
    })
    .catch(handler.ERROR);

}

if (document.readyState === 'complete' || document.readyState === 'interactive') {
    loaded(); // for Firefox
} else {
    document.addEventListener('DOMContentLoaded', loaded); // for Chrome
}

},{"./common/fav":2,"./common/handler":3,"./common/polling":4,"./common/popup":5,"./common/search":6,"./common/tabs":7,"./common/viewer":8,"./fixme":9,"./fw/api":10,"./fw/calibrations":11,"./fw/commands":12,"./fw/transfer":13,"./hw/menu":18,"./hw/registers":19,"./polyfill":25,"./ui/footer":26,"./ui/history":27,"./ui/options":28,"./ui/settings":29,"./ui/splitter":30,"./ui/tooltip":31,"./utils/ajax":32,"./utils/handy":35,"./utils/state":39}],25:[function(require,module,exports){

if (!String.prototype.includes) {
    String.prototype.includes = function() {'use strict';
        return String.prototype.indexOf.apply(this, arguments) !== -1;
    };
}

if (!String.prototype.padLeft) {
    String.prototype.padLeft = function() {'use strict';
        var matrix = arguments[0];
        if (typeof matrix === 'string') {
            if (this === null || this === undefined) {
                return matrix;
            }
            var ln = matrix.length;
            return (matrix + this).slice(-ln);
        } else {
            return this;
        }
    };
}

if (!String.prototype.padRight) {
    String.prototype.padRight = function() {'use strict';
        var matrix = arguments[0];
        if (typeof matrix === 'string') {
            if (this === null || this === undefined) {
                return matrix;
            }
            var ln = matrix.length;
            return (this + matrix).substring(0,ln);
        } else {
            return this;
        }
    };
}

if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (searchString, position) {
        var subjectString = this.toString();
        var p = position;
        if (position === undefined || position > subjectString.length) {
            p = subjectString.length;
        }
        p -= searchString.length;
        var lastIndex = subjectString.indexOf(searchString, p);
        return lastIndex !== -1 && lastIndex === p;
    };
}

},{}],26:[function(require,module,exports){

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function() {

        document.addEventListener('click', function (event) {
            var that = event.target;
            if (that.classList.contains('footer-link')) {
                document.dispatchEvent(new Event('act-popup-errors'));
            }
        });

        return Promise.resolve();

    }
};



},{}],27:[function(require,module,exports){

var nav = require('../utils/state').navigation;

module.exports = {
    loaded: function () {
        document.addEventListener('click', function (event) {
            var that = event.target;
            var page, type, init;
            var goto = null;
            if ('classList' in that) {
                if (that.classList.contains('navigate-back')) {
                    page = that.parentNode.parentNode.parentNode;
                    if (page && page.hasAttribute('type')) {
                        type = page.getAttribute('type');
                        goto = nav.getPrevious(type);
                    }
                } else if (that.classList.contains('navigate-forward')) {
                    page = that.parentNode.parentNode.parentNode;
                    if (page && page.hasAttribute('type')) {
                        type = page.getAttribute('type');
                        goto = nav.getNext(type);
                    }
                }
            }
            if (goto) {
                init = {detail: {name: goto}};
                document.dispatchEvent(new CustomEvent('act-select-section', init));
            }
        });
    }
};

},{"../utils/state":39}],28:[function(require,module,exports){
var $ = require('../utils/helper');
var handy = require('../utils/handy');

var state = require('../utils/state');
var ajax = require('../utils/ajax');
var handler = require('../common/handler');

/**
 * @private
 */
function __empty () {}

function onprogress (bar) {
    return function (event) {
        if (event.lengthComputable) {
            bar.value = (event.loaded / event.total) * 100;
        }
    };
}

/**
 * @private
 */
function __drop_fw() {
    document.dispatchEvent(new Event('act-fw-drop'));
    setTimeout(function () {
        state.setSelectedTab('hw');
        setTimeout(handy.returnToTab, 50);
    }, 100);
}

/**
 * @private
 */
function __reload_fw () {
    var file = document.createElement('input');
    file.setAttribute('type', 'file');
    file.setAttribute('accept', '.json');
    file.addEventListener('change', function () {
        var f = this.files[0];
        if (f.name.endsWith('.json') && f.size > 0) {
            var bar = $('#progress');
            bar.classList.remove('hidden');
            ajax.upload('/api', f, onprogress(bar))
            .then(function () {
                setTimeout(function () { window.location.reload(true); }, 200);
            })
            .catch(function (error) {
                handler.ERROR(error);
            })
            .then(function () {
                bar.classList.add('hidden');
            });
        } else {
            handler.ERROR('Wrong type of file');
            $('#progress').classList.add('hidden');
        }
    });
    file.click();
}

/**
 * @private
 */
function __clear_user_data () {
    state.clear();
    document.dispatchEvent(new Event('act-clear-user-data'));
}

/**
 * @private
 */
function __upload_xml () {
    var file = document.createElement('input');
    file.setAttribute('type', 'file');
    file.setAttribute('accept', '.xml');
    file.addEventListener('change', function () {
        var f = this.files[0];
        if (f.type === 'text/xml' && f.size > 0) {
            var bar = $('#progress');
            bar.classList.remove('hidden');
            ajax.upload('/xml', f, onprogress(bar))
            .then(function () {
                document.dispatchEvent(new Event('act-fw-drop'));
                return Promise.resolve();
            })
            .then(function () {
                setTimeout(function () { window.location.reload(true); }, 400);
            })
            .catch(function (error) {
                handler.ERROR(error);
            })
            .then(function () {
                bar.classList.add('hidden');
            });
        } else {
            handler.ERROR('Wrong type of file');
            $('#progress').classList.add('hidden');
        }
    });
    file.click();
}

/**
 * @private
 */
function __upload_settings_json () {
    var file = document.createElement('input');
    file.setAttribute('type', 'file');
    file.setAttribute('accept', '.json');
    file.addEventListener('change', function () {
        var f = this.files[0];
        if (f.name.endsWith('.json') && f.size > 0) {
            var reader = new FileReader();
            reader.onload = function(event) {
                try {
                    var data = JSON.parse(event.target.result.toString());
                    var init;
                    init = {detail: data};
                    document.dispatchEvent(new CustomEvent('act-load-hw-registers', init));
                } catch (ignored) {
                    handler.ERROR('Bad JSON file');
                }
            };
            reader.readAsText(f);
        } else {
            handler.ERROR('Wrong type of file');
        }
    });
    file.click();
}

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function () {

        $('#combine-multi-bytes').addEventListener('click', function () {
            if (this.checked) {
                document.dispatchEvent(new Event('act-combine-hw-bytes'));
            } else {
                document.dispatchEvent(new Event('act-split-hw-bytes'));
            }
            if (handy.isHardwareTabSelected()) {
                document.dispatchEvent(new Event('act-reload-visible'));
            }
        });

        $('#options-menu-button').addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            var that = event.target;
            that.classList.add('activated');
            $('#options-menu').classList.toggle('hidden');
        });

        document.addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            var that = event.target;
            function hideMenu() {
                $('#options-menu').classList.add('hidden');
                $('#options-menu-button').classList.remove('activated');
            }
            if (that.classList.contains('ask-opt-menu-item')) { // clicked on right menu item with ask-user
                hideMenu();
                var init;
                init = {};
                switch (that.id) {
                    case 'drop-fw-api':
                        init.detail = {
                            question: 'Erase loaded FW API settings?',
                            yes: __drop_fw,
                            no: __empty
                        };
                        break;
                    case 'reload-fw-api':
                        if (state.api.exists()) {
                            init.detail = {
                                question: 'Reload FW API settings?',
                                yes: __reload_fw,
                                no: __empty
                            };
                        } else {
                            init = null;
                            __reload_fw();
                        }
                        break;
                    case 'clear-user-data':
                        init.detail = {
                            question: 'Erase all local settings?',
                            yes: __clear_user_data,
                            no: __empty
                        };
                        break;
                    case 'upload-xml':
                        init.detail = {
                            question: 'This will reload Apical Control XML' + (state.api.exists() ? ' and discard FW API. ' : '. ') + 'Proceed?',
                            yes: __upload_xml,
                            no: __empty
                        };
                        break;
                    default:
                        break;
                }
                if (init) {
                    document.dispatchEvent(new CustomEvent('act-ask-user', init));
                }
            } else if (that.classList.contains('opt-menu-item')) { // clicked on right menu item
                hideMenu();
                switch (that.id) {
                    case 'open-settings':
                        document.dispatchEvent(new Event('act-popup-settings'));
                        break;
                    case 'about-act':
                        document.dispatchEvent(new Event('act-popup-about'));
                        break;
                    case 'save-hw-registers':
                        document.dispatchEvent(new Event('act-save-hw-registers'));
                        break;
                    case 'save-visible-hw-registers':
                        document.dispatchEvent(new Event('act-save-visible-hw-registers'));
                        break;
                    case 'load-hw-registers':
                        __upload_settings_json();
                        break;
                    case 'save-static-calibrations':
                        document.dispatchEvent(new Event('act-save-static-calibrations'));
                        break;
                    case 'save-dynamic-calibrations':
                        document.dispatchEvent(new Event('act-save-dynamic-calibrations'));
                        break;
                    default:
                        break;
                }
            } else if (that.classList.contains('opt-menu-link')) {
                hideMenu();
                var url = that.getAttribute('target');
                window.open(url, '_blank').focus();
            }
        });

        return Promise.resolve();

    }

};

},{"../common/handler":3,"../utils/ajax":32,"../utils/handy":35,"../utils/helper":36,"../utils/state":39}],29:[function(require,module,exports){
var state = require('../utils/state');

function changeSetting (event) {
    var that = event.target;
    if (that.hasOwnProperty('classList')) {} else {
        return;
    }
    if (that.classList.contains('config')) {
        var id = that.id;
        var name = id.substring(4);
        switch (that.getAttribute('cfg-type')) {
            case 'boolean':
                state.setSetting(name, that.checked);
                break;
            case 'number':
                var value = parseInt(that.value);
                var min = parseInt(that.getAttribute('cfg-min'));
                var max = parseInt(that.getAttribute('cfg-max'));
                if (isNaN(value) || value > max || value < min) {
                    that.value = that.getAttribute('original-value')
                } else {
                    state.setSetting(name, value);
                }
                break;
            default: break;
        }
    }
}

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function () {

        document.addEventListener('blur', changeSetting, true);

        return Promise.resolve();

    }

};

},{"../utils/state":39}],30:[function(require,module,exports){
var $ = require('../utils/helper');

var self = function () {};
self.menu = null;
self.drag = function (event) {
    self.menu.style.width = event.clientX + 'px';
};
self.stop = function () {
    window.removeEventListener('mousemove', self.drag);
    window.removeEventListener('mouseup', self.stop);
};

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function () {

        self.menu = $('.left-pane');

        $('div.splitter').addEventListener('mousedown', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            event.preventDefault();
            window.addEventListener('mousemove', self.drag);
            window.addEventListener('mouseup', self.stop);
        });

        document.addEventListener('click', function (event) {
            if (event.button !== 0) { // only left button
                return;
            }
            var that = event.target;
            if (that.classList.contains('handle')) {
                var hidden = $('.left-pane.hidden');
                var splitter = $('.splitter');
                if (hidden) {
                    hidden.classList.remove('hidden');
                    hidden.style.width = '200px';
                    splitter.classList.remove('hidden');
                } else {
                    $('.left-pane').classList.add('hidden');
                    splitter.classList.add('hidden');
                }
            }
        });

        return Promise.resolve();

    }

};

},{"../utils/helper":36}],31:[function(require,module,exports){

module.exports = {

    /**
     * @return {Promise}
     */
    loaded: function () {

        var wnd = document.querySelector('.main');
        var tooltip = document.querySelector('.tooltip');
        var timeoutToHide = null;
        var timeoutToShow = null;
        var lastX = 0;
        var lastY = 0;

        document.addEventListener('mousemove', function (event) {

            var that = event.target;
            if (!('hasAttribute' in that)) {
                return;
            }

            if (that.hasAttribute('tooltip')) {

                if (timeoutToHide) {
                    clearTimeout(timeoutToHide);
                }
                timeoutToHide = setTimeout(function () {
                    tooltip.classList.add('hidden');
                }, 10000);

                var x = parseInt(event.clientX);
                var y = parseInt(event.clientY);
                var dx = Math.abs(x - lastX);
                var dy = Math.abs(y - lastY);

                if ( (dx * dx + dy * dy) < 64 ) { // displacement is less than 8 pixels
                    return;
                }

                lastX = x;
                lastY = y;

                tooltip.innerHTML = that.getAttribute('tooltip');
                if (timeoutToShow) {
                    clearTimeout(timeoutToShow);
                }
                timeoutToShow = setTimeout(function () {
                    tooltip.classList.remove('hidden');
                }, 500);

                var cw = parseInt(wnd.offsetWidth);
                var ch = parseInt(wnd.offsetHeight);
                var tw = parseInt(tooltip.offsetWidth);
                var th = parseInt(tooltip.offsetHeight);

                if ((x + tw) > cw) {
                    x = cw - tw - 20;
                }
                if ((y + th) > ch) {
                    y = ch - th - 20;
                }

                tooltip.style.left = x + 'px';
                tooltip.style.top = y + 'px';

            } else if (!that.classList.contains('hidden')) {

                tooltip.classList.add('hidden');
                lastX = 0;
                lastY = 0;
                if (timeoutToShow) {
                    clearTimeout(timeoutToShow);
                }

            }

        });

        return Promise.resolve();

    }

};

},{}],32:[function(require,module,exports){
var _ = require('../utils/promise');
var network = require('../utils/network');

/**
 * @param {Object} obj
 * @return {String}
 */
function stringify (obj) {
    var text = '', value;
    var first = true;
    for(var key in obj) if (obj.hasOwnProperty(key)) {
        value = obj[key];
        if(value === null || value === undefined) {
            continue;
        }
        if (first) {
            first = false;
        } else {
            text += (';');
        }
        switch (typeof value) {
            case 'string':
                text += ('"' + key + '":"' + value + '"');
                break;
            case 'number':
                if (isNaN(value)) {
                    continue;
                } else {
                    text += ('"' + key + '":' + value.toString());
                }
                break;
            case 'object':
                if (Array.isArray(value)) {
                    var a = JSON.stringify(value);
                    a = a.substring(1, a.length - 1);
                    text += ('"' + key + '"#' + a);
                }
                break;
            case 'boolean':
                text += ('"' + key + '":' + (value ? 't' : 'f'));
                break;
            default:
                break;
        }
    }
    return text;
}

/**
 * @param {String} url
 * @param {String} payload
 * @return {Promise}
 * @private
 */
function __post (url, payload) {
    var defer = _.defer();
    network.POST(url, payload, function (error, tuple) {
        if (error) {
            defer.reject(error);
        } else {
            var status = tuple[0];
            var message = tuple[1];
            if (status === 200 || status === 202) {
                try {
                    var data = tuple[2];
                    if (data.length === 0) {
                        defer.resolve({});
                    } else {
                        defer.resolve(JSON.parse(data));
                    }
                } catch (ignored) {
                    defer.reject('Malformed JSON in response');
                }
            } else if (status === 503) { // AM not configured

                var def = _.defer();
                var init;
                init = {
                    detail: {
                        defer: def
                    }
                };
                document.dispatchEvent(new CustomEvent('act-init-am', init));
                def.promise.then(function () {
                    var d = _.defer();
                    network.POST(url, payload, function (error, tuple) {
                        if (error) {
                            d.reject(error);
                        } else {
                            var status = tuple[0];
                            var message = tuple[1];
                            if (status === 200 || status === 202) {
                                try {
                                    var data = tuple[2];
                                    if (data.length === 0) {
                                        d.resolve({});
                                    } else {
                                        d.resolve(JSON.parse(data));
                                    }
                                } catch (ignored) {
                                    d.reject('Malformed JSON in response');
                                }
                            } else {
                                d.reject(message);
                            }
                        }
                    });
                    return d.promise;
                })
                .then(function (data) {
                    defer.resolve(data);
                })
                .catch(function (error) {
                    defer.reject('Failed to initialize access manager: ' + error);
                });

            } else {
                defer.reject(message);
            }
        }
    });
    return defer.promise;
}

module.exports = {

    /**
     * @param {String} url
     * @return {Promise}
     */
    get: function (url) {
        var defer = _.defer();
        network.GET(url, function (error, tuple) {
            if (error) {
                defer.reject(error);
            } else {
                if (tuple[0] === 200) { // status code
                    try {
                        defer.resolve(JSON.parse(tuple[2])); // response text
                    } catch (ignored) {
                        defer.reject('Malformed JSON in response');
                    }
                } else {
                    defer.reject(tuple[1]); // status text
                }
            }
        });
        return defer.promise;
    },

    /**
     * @param {String} url
     * @param {File} file
     * @param {Function} [onprogress]
     * @return {Promise}
     */
    upload: function (url, file, onprogress) {
        var defer = _.defer();
        network.UPLOAD(url, file, function (error, tuple) {
            if (error) {
                defer.reject(error);
            } else {
                if (tuple[0] === 200) { // status code
                    defer.resolve(tuple[0]);
                } else {
                    defer.reject(tuple[1]); // status text
                }
            }
        }, onprogress);
        return defer.promise;
    },

    /**
     * @param {String|null} name
     * @param {String} type
     * @param {Number} offset
     * @param {Number} size
     * @param {String} [host]
     * @return {Promise}
     */
    hwRead: function (name, type, offset, size, host) {
        var url = (host ? 'http://' + host + '/' : '/') + 'hw/read';
        return __post(url, stringify({type: type, offset: offset, size: size}))
        .then(function (response) {
            if (name) {
                var init;
                init = {
                    detail: {
                        command: name,
                        bytes: response.bytes
                    }
                };
                document.dispatchEvent(new CustomEvent('act-hw-value-changed', init));
                return Promise.resolve();
            } else {
                return Promise.resolve(response.bytes);
            }
        });
    },

    /**
     * @param {Object} data
     * @return {Promise}
     */
    hwPoll: function (data) {
        var payload = [], item;
        for (var key in data) if (data.hasOwnProperty(key)) {
            item = data[key];
            payload.push(key, item.type, item.offset, item.size);
        }
        if (payload.length === 0) {
            return Promise.resolve();
        }
        return __post('/hw/poll', stringify({data: payload}))
        .then(function (response) {
            var bytes;
            for (var cmd in response) if (response.hasOwnProperty(cmd)) {
                bytes = response[cmd];
                if (typeof cmd === 'string' && Array.isArray(bytes)) {
                    var init;
                    init = {
                        detail: {
                            command: cmd,
                            bytes: bytes
                        }
                    };
                    document.dispatchEvent(new CustomEvent('act-hw-value-changed', init));
                } else {
                    return Promise.reject('Bad response for poll request');
                }
            }
            return Promise.resolve();
        });
    },

    /**
     * @param {String|null} name
     * @param {String} type
     * @param {Number} offset
     * @param {Array} data
     * @param {Array} [mask]
     * @return {Promise}
     */
    hwWrite: function (name, type, offset, data, mask) {
        return __post('/hw/write', stringify({type: type, offset: offset, data: data, mask: mask}))
        .then(function (response) {
            if (name) {
                var init;
                init = {
                    detail: {
                        command: name,
                        bytes: response.bytes
                    }
                };
                document.dispatchEvent(new CustomEvent('act-hw-value-changed', init));
                return Promise.resolve();
            } else {
                return Promise.resolve(response.bytes);
            }
        });
    },

    /**
     * @param {Number} section
     * @param {Number} command
     * @param {Boolean} [silent]
     * @return {Promise}
     */
    fwGet: function (section, command, silent) {
        return __post('/fw/get', stringify({sec: section, cmd: command}))
        .then(function (response) {
            if (silent) {
                return Promise.resolve(response.val);
            } else {
                var init;
                init = {
                    detail: {
                        section: section,
                        command: command,
                        value: response.val
                    }
                };
                document.dispatchEvent(new CustomEvent('act-api-value-changed', init));
                return Promise.resolve();
            }
        });
    },

    /**
     * @param {Object} data
     * @return {Promise}
     */
    fwPoll: function (data) {
        var payload = [], item;
        for (var name in data) if (data.hasOwnProperty(name)) {
            item = data[name];
            payload.push(item.section, item.command);
        }
        if (payload.length === 0) {
            return Promise.resolve();
        }
        return __post('/fw/poll', stringify({data: payload}))
        .then(function (response) {
            var value;
            for (var name in response) if (response.hasOwnProperty(name)) {
                value = response[name];
                if (typeof value === 'number') {
                    var parts = name.split(':');
                    var init;
                    init = {
                        detail: {
                            section: parseInt(parts[0]),
                            command: parseInt(parts[1]),
                            value: value
                        }
                    };
                    document.dispatchEvent(new CustomEvent('act-api-value-changed', init));
                } else {
                    return Promise.reject('Bad response for poll request');
                }
            }
            return Promise.resolve();
        });
    },

    /**
     * @param {Number} section
     * @param {Number} command
     * @param {Number} value
     * @return {Promise}
     */
    fwSet: function (section, command, value) {
        return __post('/fw/set', stringify({sec: section, cmd: command, page: value}))
        .then(function () {
            var init;
            init = {
                detail: {
                    section: section,
                    command: command,
                    value: value
                }
            };
            document.dispatchEvent(new CustomEvent('act-api-value-changed', init));
            return Promise.resolve();
        });
    },

    /**
     * @param {Number} section
     * @param {Number} command
     * @param {Number} page
     * @return {Promise}
     */
    fwGetPage: function (section, command, page) {
        return __post('/fw/get', stringify({sec: section, cmd: command, page: page}))
        .then(function (response) {
            return Promise.resolve(response.val);
        });
    },

    /**
     * @param {Number} page
     * @param {Number} size
     * @param {Boolean} [silent]
     * @return {Promise}
     */
    fwLoadArray: function (page, size, silent) {
        return __post('/calibration/load', stringify({page: page, size: size}))
        .then(function (response) {
            var init;
            init = {
                detail: {
                    page: page,
                    bytes: response.val
                }
            };
            if (silent) {} else {
                document.dispatchEvent(new CustomEvent('act-calibration-value-changed', init));
            }
            return Promise.resolve(response.val);
        });
    },

    /**
     * @param {Number} page
     * @param {Array} bytes
     * @return {Promise}
     */
    fwSaveArray: function (page, bytes) {
        return __post('/calibration/save', stringify({page: page, data: bytes}));
    },

    /**
     * @return {Promise}
     */
    fwDeleteApi: function () {
        var defer = _.defer();
        network.DELETE('/api', function (error) {
            if (error) {
                defer.reject(error);
            } else {
                defer.resolve();
            }
        });
        return defer.promise;
    },

    /**
     * @param {Number} debugOffset
     * @param {Number} hwBufOffset
     * @param {Number} hwBufSize
     * @return {Promise}
     */
    initAM: function (debugOffset, hwBufOffset, hwBufSize) {
        return __post('/am', stringify({doff: debugOffset, boff: hwBufOffset, size: hwBufSize, init: true}));
    },

    /**
     * @param {Number} section
     * @param {Number} command
     * @return {Promise}
     */
    fileDownload: function (section, command) {
        var defer = _.defer();
        network.POST('/file/download', '', function (error, tuple) {
            if (error) {
                defer.reject(error);
            } else {
                if (tuple[0] === 200) { // status code
                    try {
                        var data = JSON.parse(tuple[2]);
                        defer.resolve(data.file); // payload
                    } catch (ignored) {
                        defer.reject('Malformed JSON in response'); // status text
                    }
                } else {
                    defer.reject(tuple[1]); // status text
                }
            }
        }, {
            'act-file-section': section,
            'act-file-command': command
        });
        return defer.promise;
    },

    /**
     * @param {Number} section
     * @param {Number} command
     * @param {Object} bytes
     * @return {Promise}
     */
    fileUpload: function (section, command, bytes) {
        var defer = _.defer();
        network.POST('/file/upload', bytes, function (error) {
            if (error) {
                defer.reject(error);
            } else {
                defer.resolve();
            }
        }, {
            'act-file-section': section,
            'act-file-command': command
        });
        return defer.promise;
    }

};

},{"../utils/network":37,"../utils/promise":38}],33:[function(require,module,exports){
/**
 * @param {Number} bits
 * @param {Number} align
 * @private
 */
function __bad_params (bits, align) {
    if (isNaN(bits) || isNaN(align) || (align % 8) !== 0 || align < 0) {
        return true;
    }
    return !!(bits > align || bits < 0);
}

/**
 * @param {Number} value
 * @param {Number} bits
 * @param {Number} align
 * @return {Array}
 * @private
 */
function __split_value (value, bits, align) {
    var bytes = [];
    for (var w = 0; w < align; w += 8) {
        if (w > bits) {
            bytes.push(0);
        } else {
            bytes.push(( value >> w ) & 0xff);
        }
    }
    return bytes;
}

/**
 * @param {Array} bytes
 * @param {Number} mask
 * @param {Number} align
 * @param {Number} idx
 * @return {Number}
 * @private
 */
function __combine_bytes(bytes, mask, align, idx) {
    var x = 0;
    for (var w = 0; w < align; w += 8) {
        x |= ( bytes[idx] << w );
        idx++;
    }
    x = (x & mask) >>> 0;
    return x;
}

module.exports = {

    /**
     * @param {Number} value
     * @param {Number} bits
     * @param {Number} align
     * @return {null|Array}
     */
    itemToBytes: function (value, bits, align) {
        if (__bad_params(bits, align)) {
            return null;
        }
        return __split_value(value, bits, align);
    },

    /**
     * @param {Array} bytes
     * @param {Number} bits
     * @param {Number} align
     * @return {null|Number}
     */
    bytesToItem: function (bytes, bits, align) {
        if (__bad_params(bits, align) || ((bytes.length * 8) != align)) {
            return null;
        }
        var mask = parseInt(Math.pow(2, bits)) - 1;
        return __combine_bytes(bytes, mask, align, 0);
    },

    /**
     * @param {Array} bytes
     * @param {Number} mask
     * @param {Number} align
     * @param {Number} idx
     * @return {Number}
     */
    bytesToItem2: __combine_bytes,

    /**
     * @param {Array} data
     * @param {Number} bits
     * @param {Number} align
     * @return {null|Array}
     */
    arrayToBytes: function (data, bits, align) {
        if (__bad_params(bits, align)) {
            return null;
        }
        var bytes = [];
        data.forEach(function (item) {
            Array.prototype.push.apply(bytes, __split_value(item, bits, align));
        });
        return bytes;
    },

    /**
     * @param {Array} bytes
     * @param {Number} bits
     * @param {Number} align
     * @return {null|Array}
     */
    bytesToArray: function (bytes, bits, align) {
        if (__bad_params(bits, align)) {
            return null;
        }
        var data = [];
        var ln = bytes.length;
        var mask = parseInt(Math.pow(2, bits)) - 1;
        var width = align >>> 3;
        for (var b = 0; b < ln; b += width) {
            data.push(__combine_bytes(bytes, mask, align, b));
        }
        return data;
    }

};

},{}],34:[function(require,module,exports){
var state = require('../utils/state');

module.exports = {

    /**
     * @param {String} fname
     * @param {String} mime
     * @param {Object|ArrayBuffer} data
     */
    save: function (fname, mime, data) {
        var a = document.createElement('a');
        a.download = fname;
        var blob;
        if (mime === 'application/json' && typeof data === 'object') {
            blob = new Blob([state.fancyJSON() ? JSON.stringify(data, null, 2) : JSON.stringify(data)], {type: mime});
        } else {
            blob = new Blob([data], {type: mime});
        }
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.style.display = 'hidden';
        document.body.appendChild(a);
        a.click();
        window.setTimeout(function () {
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }, 60000);
    },

    /**
     * @param {String} fname
     * @param {String} url
     */
    saveURL: function (fname, url) {
        var a = document.createElement('a');
        a.download = fname;
        a.href = url;
        a.style.display = 'none';
        document.body.appendChild(a);
        a.click();
        window.setTimeout(function () {
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }, 60000);
    }

};

},{"../utils/state":39}],35:[function(require,module,exports){
var $ = require('../utils/helper');
var state = require('../utils/state');

module.exports.returnToTab = function () {
    var tab = $('input.tab-radio[value="' + state.getSelectedTab() + '"]');
    if (tab) {
        tab.checked = true;
        tab.dispatchEvent(new Event('change'));
    } else {
        Array.prototype.slice.call($.$('div.container')).forEach(function (container) {
            container.classList.add('hidden');
        });
    }
};
module.exports.hideMenus = function () {
    Array.prototype.slice.call($.$('ul.menu')).forEach(function (menu) {
        menu.classList.add('hidden');
    });
    $('div.menu-top').classList.add('hidden');
    Array.prototype.slice.call($.$('input.tab-radio[name=tabs]')).forEach(function (tab) {
        tab.checked = false;
    });
};
module.exports.clearMenuItemSelection = function () {
    Array.prototype.slice.call($.$('.selected-item')).forEach(function (item) {
        item.classList.remove('selected-item');
    });
    $('#options-menu').classList.add('hidden');
    $('#options-menu-button').classList.remove('activated');
};
module.exports.showTab = function (name) {
    var tab = $('input.tab-radio[value="' + name + '"]');
    if (tab) {
        tab.checked = true;
        tab.dispatchEvent(new Event('change'));
    }
};
module.exports.hideSections = function () {
    Array.prototype.slice.call($.$('section.section:not(.hidden)')).forEach(function (section) {
        section.classList.add('hidden');
        section.classList.remove('in-common');
    });
};
module.exports.isHardwareTabSelected = function () {
    return $('div.hw-controls.hidden') === null;
};
module.exports.isApiTabSelected = function () {
    return $('div.api-controls.hidden') === null;
};

},{"../utils/helper":36,"../utils/state":39}],36:[function(require,module,exports){
module.exports = document.querySelector.bind(document);
module.exports.$ = document.querySelectorAll.bind(document);

},{}],37:[function(require,module,exports){
/**
 * @param {Function} callback
 * @return {XMLHttpRequest}
 * @private
 */
function __make_http_request(callback) {
    var xhr = new XMLHttpRequest();
    xhr.onload = function () {
        if (typeof callback === 'function') {
            callback(null, [parseInt(this.status), this.statusText, this.responseText]);
        }
    };
    xhr.onerror = function () {
        if (typeof callback === 'function') {
            callback('Network error');
        }
    };
    return xhr;
}

module.exports = {

    /**
     * @param {String} url
     * @param {Function} callback
     */
    GET: function (url, callback) {
        var xhr = __make_http_request(callback);
        xhr.open('GET', url);
        xhr.send();
    },

    /**
     * @param {String} url
     * @param {String|ArrayBuffer} payload
     * @param {Function} callback
     * @param {Object} [headers]
     */
    POST : function (url, payload, callback, headers) {
        var xhr = __make_http_request(callback);
        xhr.open('POST', url);
        if (headers) for (var name in headers) if (headers.hasOwnProperty(name)) {
            xhr.setRequestHeader(name, headers[name]);
        }
        xhr.send(payload);
    },

    /**
     * @param {String} url
     * @param {String} payload
     * @param {Function} callback
     * @param {Function} [onprogress]
     */
    UPLOAD: function (url, payload, callback, onprogress) {
        var xhr = __make_http_request(callback);
        if (typeof onprogress === 'function') {
            xhr.upload.onprogress = onprogress;
        }
        xhr.open('POST', url);
        xhr.send(payload);
    },

    /**
     * @param {String} url
     * @param {Function} callback
     * @constructor
     */
    DELETE: function (url, callback) {
        var xhr = __make_http_request(callback);
        xhr.open('DELETE', url);
        xhr.send();
    }
};

},{}],38:[function(require,module,exports){

module.exports.defer = function () {
    var defer = {};
    defer.promise = new Promise(function (resolve, reject) {
        defer.resolve = resolve;
        defer.reject = reject;
    });
    return defer;
};

},{}],39:[function(require,module,exports){
function State () {}

State.namespace = 'act/3.1';

State.fw = {};
State.fw.api = {};
State.fw.exists = false;
State.options = {
    beforeunload: true
};

State.navigation = {
    'hw': {
        history: [],
        pointer: null
    },
    'api': {
        history: [],
        pointer: null
    },
    'static': {
        history: [],
        pointer: null
    },
    'dynamic': {
        history: [],
        pointer: null
    },
    'file': {
        history: [],
        pointer: null
    }
};

module.exports = {

    /**
     * @param {Array} data
     */
    saveStarredRegisters: function (data) {
        if (Array.isArray(data)) {
            localStorage[State.namespace + '/starred/registers'] = JSON.stringify(data);
        } else {
            localStorage[State.namespace + '/starred/registers'] = '[]';
        }
    },

    /**
     * @return {Array}
     */
    loadStarredRegisters: function () {
        var text = localStorage[State.namespace + '/starred/registers'];
        try {
            var data = JSON.parse(text);
            if (Array.isArray(data)) {
                return data;
            }
        } catch (ignored) {}
        localStorage[State.namespace + '/starred/registers'] = '[]';
        return [];
    },

    /**
     * @param {Array} data
     */
    saveStarredPages: function (data) {
        if (Array.isArray(data)) {
            localStorage[State.namespace + '/starred/pages'] = JSON.stringify(data);
        } else {
            localStorage[State.namespace + '/starred/pages'] = '[]';
        }
    },

    /**
     * @return {Array}
     */
    loadStarredPages: function () {
        var text = localStorage[State.namespace + '/starred/pages'];
        try {
            var data = JSON.parse(text);
            if (Array.isArray(data)) {
                return data;
            }
        } catch (ignored) {}
        localStorage[State.namespace + '/starred/pages'] = '[]';
        return [];
    },

    hw: {
        setSelectedSectionName: function (name) {
            localStorage[State.namespace + '/last-section/hw'] = name;
        },
        hasSelectedSection: function () {
            return localStorage.hasOwnProperty(State.namespace + '/last-section/hw');
        },
        getSelectedSectionName: function () {
            return localStorage[State.namespace + '/last-section/hw'];
        }
    },

    api: {
        setSelectedSectionName: function (name) {
            localStorage[State.namespace + '/last-section/api'] = name;
        },
        hasSelectedSection: function () {
            return localStorage.hasOwnProperty(State.namespace + '/last-section/api');
        },
        getSelectedSectionName: function () {
            return localStorage[State.namespace + '/last-section/api'];
        },
        cache: function (obj) {
            State.fw.api = obj;
            State.fw.exists = true;
        },
        exists: function () {
            return State.fw.exists;
        },
        get: function () {
            return State.fw.api;
        },
        drop: function () {
            State.fw.api = {};
            State.fw.exists = false;
        }
    },

    cstatic: {
        setSelectedSectionName: function (name) {
            localStorage[State.namespace + '/last-section/static'] = name;
        },
        hasSelectedSection: function () {
            return localStorage.hasOwnProperty(State.namespace + '/last-section/static');
        },
        getSelectedSectionName: function () {
            return localStorage[State.namespace + '/last-section/static'];
        }
    },

    cdynamic: {
        setSelectedSectionName: function (name) {
            localStorage[State.namespace + '/last-section/dynamic'] = name;
        },
        hasSelectedSection: function () {
            return localStorage.hasOwnProperty(State.namespace + '/last-section/dynamic');
        },
        getSelectedSectionName: function () {
            return localStorage[State.namespace + '/last-section/dynamic'];
        }
    },

    file: {
        setSelectedSectionName: function (name) {
            localStorage[State.namespace + '/last-section/file'] = name;
        },
        hasSelectedSection: function () {
            return localStorage.hasOwnProperty(State.namespace + '/last-section/file');
        },
        getSelectedSectionName: function () {
            return localStorage[State.namespace + '/last-section/file'];
        }
    },

    setSelectedTab: function (tab) {
        localStorage[State.namespace + '/tabs/selected'] = tab;
    },

    getSelectedTab: function () {
        var tab = localStorage[State.namespace + '/tabs/selected'];
        if (['hw', 'api', 'static', 'dynamic', 'file'].indexOf(tab) >= 0) {
            return tab;
        } else {
            localStorage[State.namespace + '/tabs/selected'] = 'hw';
            return 'hw';
        }
    },

    clear: function () {
        for (var key in localStorage) {
            if (localStorage.hasOwnProperty(key) && key.indexOf(State.namespace + '/') === 0) {
                delete localStorage[key];
            }
        }
        State.options.beforeunload = false;
    },

    mayBeforeUnload: function () {
        return State.options.beforeunload;
    },

    getPollingPace: function () {
        var key = State.namespace + '/settings/polling-pace';
        if (localStorage.hasOwnProperty(key)) {
            var value = parseInt(localStorage[key]);
            if (value >= 100) {
                return value;
            } else {
                localStorage[key] = '100';
                return 100;
            }
        } else {
            return 500;
        }
    },

    fancyJSON: function () {
        var key = State.namespace + '/settings/fancy-json';
        if (localStorage.hasOwnProperty(key)) {
            return JSON.parse(localStorage[key]);
        } else {
            return true;
        }
    },

    /**
     * @param {String} name
     * @param {Number|Boolean} value
     */
    setSetting: function (name, value) {
        var key = State.namespace + '/settings/' + name;
        var type = typeof value;
        switch (type) {
            case 'number': localStorage[key] = value.toString(); break;
            case 'boolean': localStorage[key] = !!value;  break;
            default: break;
        }
    },

    __get_namespace: function () {
        return State.namespace;
    },

    navigation: {

        /**
         * @param {String} tab
         * @param {String} item
         */
        addStep: function (tab, item) {
            var nav = State.navigation[tab];
            if (nav) {
                var idx = nav.history.indexOf(item);
                if (idx < 0) {
                    nav.history.push(item);
                    nav.pointer = nav.history.indexOf(item);
                } else {
                    nav.pointer = idx;
                }
            }
        },

        /**
         * @param {String} tab
         * @return {String|null}
         */
        getPrevious: function(tab) {
            var nav = State.navigation[tab];
            if (nav) {
                if (nav.pointer === null) {
                    return null;
                } else {
                    if (nav.pointer > 0) {
                        return nav.history[nav.pointer - 1];
                    } else {
                        return null;
                    }
                }
            } else {
                return null;
            }
        },

        /**
         * @param {String} tab
         * @return {String|null}
         */
        getNext: function(tab) {
            var nav = State.navigation[tab];
            if (nav) {
                if (nav.pointer === null) {
                    return null;
                } else {
                    if (nav.pointer < (nav.history.length - 1)) {
                        return nav.history[nav.pointer + 1];
                    } else {
                        return null;
                    }
                }
            } else {
                return null;
            }
        }
    }

};

},{}],40:[function(require,module,exports){
var ajax = require('../utils/ajax');

/**
 * Reload all hardware registers
 * @param {Worker} self
 */

module.exports = function (self) {
    self.onmessage = function(event) {
        var data = event.data;
        var base = data.base;
        var commands = data.commands;
        var ln = commands.length;
        var results = [];
        var promises = commands.filter(function (command) {
            return command !== null;
        }).map(function (command, idx) {
                return ajax.hwRead(null, command.type, command.offset, command.size, base)
                .then(function (bytes) {
                    results.push({
                        name: command.name,
                        bytes: bytes
                    });
                    self.postMessage({progress: idx});
                });
        });
        Promise.all(promises)
        .then(function () {
            self.postMessage({done: true, results: results});
        })
        .catch(function (error) {
            self.postMessage({error: error});
        })
        .then(function () { // finally
            close();
        });
    };
};

},{"../utils/ajax":32}]},{},[24]);
